{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Binary_tree.js","../../src/ufunction.js","../../src/Mosaic.svelte","../../node_modules/svelte-tree-view-component/TreeLeaf.svelte","../../node_modules/svelte-tree-view-component/TreeBranch.svelte","../../node_modules/svelte-tree-view-component/TreeView.svelte","../../src/ontuneTreeView.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback, value) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        if (value === undefined) {\n            callback(component.$$.ctx[index]);\n        }\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.54.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","// class Node {\r\n  export class Node {\r\n  constructor(\r\n    id,                           // 자신의 ID\r\n    div_type = \"N\",               // DIV 표시 방식(None / Col / Row)\r\n    node_type = \"C\",              // 노드 타입(Disable / Parent / Child )\r\n    node_text = \"\",               // Body Text\r\n    inset_top = 0,\r\n    inset_right = 0,\r\n    inset_bottom = 0,\r\n    inset_left = 0,\r\n    ratio = 50,\r\n\r\n    p_id = null,\r\n    left = null,\r\n    right = null\r\n  ) {\r\n    this.id = id;\r\n    this.div_type = div_type;\r\n    this.node_type = node_type;\r\n    this.node_text = node_text;\r\n\r\n    this.inset_top = inset_top;\r\n    this.inset_right = inset_right;\r\n    this.inset_bottom = inset_bottom;\r\n    this.inset_left = inset_left;\r\n    this.ratio = ratio;\r\n\r\n    this.p_id = p_id;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n}\r\n\r\n// function find_node(target_id) {\r\n//   function searchTree(node) {\r\n//     if (node.id === target_id) {\r\n//       // console.log('node.id = ' + node.id);\r\n//       // console.log('target_id = ' + target_id);\r\n\r\n//       return node;\r\n//     } else {\r\n//       if (node.left) {\r\n//         searchTree(node.left);\r\n//       }\r\n\r\n//       if (node.right) {\r\n//         searchTree(node.right);\r\n//       }\r\n//     }\r\n\r\n//     console.log('node.id = ' + node.id);\r\n//     console.log('target_id = ' + target_id);\r\n//   }\r\n//   // traverse(this.root);\r\n//   return null;\r\n// };\r\n\r\nexport class Binary_Tree {\r\n  constructor() {\r\n    this.root = null;\r\n  }\r\n\r\n  // 추가 버튼을 통해 노드 추가 요청이 온다. 이때, 자신의 node_ID(key)를 들고 오기 때문에 Parent ID 또한 알 수 있다.\r\n  // 기존 DIV는 좌(상)에 위치하기 때문에, 추가는 무조건 우(하)에 된다. => Right Node에 Node를 추가함.\r\n  // 그렇다면 Left는 언제 생기냐? 추가 버튼이 눌려서 이벤트가 생성될 때, 해당 Div에 있는 key를 알 수 있으니, 그걸로 Left로 지정한다.\r\n  // Right가 생길 때, Left가 null 일 수는 없다. 이때는 노드 자체를 삭제하고 상위 부모 자리에 Right 노드 정보를 넣어주어야한다.\r\n  insert(parent_node, new_id, text_idx) {\r\n    console.log(\"===========insert 1회============\");\r\n\r\n    // 부모 node 정보를 불러와서 left, right 로 분류하여 추가해준다.(기존 Left, 신규 Right)\r\n    // const old_node = this.find_node(parent_id);\r\n    const old_node   = parent_node;\r\n    const left_node  = new Node(new_id,     \"N\", \"C\",          old_node.node_text, old_node.inset_top, old_node.inset_right, old_node.inset_bottom, old_node.inset_left, 50, old_node.id);\r\n    const right_node = new Node(new_id + 1, \"N\", \"C\", \"windows \" + (text_idx + 1), old_node.inset_top, old_node.inset_right, old_node.inset_bottom, old_node.inset_left, 50, old_node.id);\r\n\r\n    // console.log(\"부모 ID = \" + old_node.id);\r\n    // console.log(old_node);\r\n\r\n    // target 노드를 찾아왔으니, Left Right 값을 입력한다.\r\n    if (old_node) {\r\n      // 화면 너비\r\n      let calc_width  = (100 - (old_node.inset_left + old_node.inset_right))  / 2;\r\n\r\n      // 화면 높이\r\n      let calc_height = (100 - (old_node.inset_top  + old_node.inset_bottom)) / 2;\r\n\r\n      // (abs(R - L) > abs(B - T) ?)\r\n      if (calc_width >= calc_height) {\r\n        // 타입변경\r\n        old_node.div_type = \"C\";\r\n\r\n        // inset 값 셋팅\r\n        left_node.inset_right = old_node.inset_right + calc_width;\r\n        right_node.inset_left = old_node.inset_left  + calc_width;\r\n      } else {\r\n        // 타입변경\r\n        old_node.div_type = \"R\";\r\n\r\n        // inset 값 셋팅\r\n        left_node.inset_bottom = old_node.inset_bottom + calc_height;\r\n        right_node.inset_top   = old_node.inset_top    + calc_height;\r\n      }\r\n\r\n      // 기존 old도 값을 바꿔주고\r\n      old_node.node_type = \"P\";\r\n      old_node.node_text = \"\";\r\n\r\n      // Left node에 대한 내용 채워주고\r\n      // left_node.node_type = \"C\";\r\n\r\n      // Right node에 대한 내용 채워주고\r\n      // right_node.node_type = \"C\";\r\n\r\n      // Left | right 입력\r\n      // old_node.left_id  = left_node.id;\r\n      // old_node.right_id = right_node.id;\r\n      old_node.left  = left_node;\r\n      old_node.right = right_node;\r\n\r\n      return [left_node, right_node];//[left_node, left_node, right_node];\r\n    }\r\n    return null;//left_node;//old_node.left;\r\n    // return left_node;//old_node.left;\r\n  }\r\n\r\n  change(parent_node, new_id, change_node, display_type, bLeft) {\r\n    console.log(\"===========change 1회============\");\r\n\r\n    // 부모 node 정보를 불러와서 left, right 로 분류하여 추가해준다.(기존 Left, 신규 Right)\r\n    // const old_node = this.find_node(parent_id);\r\n    const old_node   = parent_node;\r\n    const left_node  = new Node(new_id,     \"N\", \"C\", \"\", 0, 0, 0, 0, 50, old_node.id);\r\n    const right_node = new Node(new_id + 1, \"N\", \"C\", \"\", 0, 0, 0, 0, 50, old_node.id);\r\n\r\n    if (bLeft === true) {\r\n      left_node.node_text  = change_node.node_text;\r\n      right_node.node_text = old_node.node_text;\r\n    } else {\r\n      left_node.node_text  = old_node.node_text;\r\n      right_node.node_text = change_node.node_text;\r\n    }\r\n\r\n    // target 노드를 찾아왔으니, Left Right 값을 입력한다.\r\n    if (old_node) {\r\n      // 기존 old도 값을 바꿔주고\r\n      if ((display_type === \"L\") || (display_type === \"R\")) {\r\n        old_node.div_type  = \"C\";\r\n      } else {\r\n        old_node.div_type  = \"R\";\r\n      }\r\n      old_node.node_type = \"P\";\r\n      old_node.node_text = \"\";\r\n\r\n      // Left | right 입력\r\n      old_node.left  = left_node;\r\n      old_node.right = right_node;\r\n\r\n      return [left_node, right_node];//[left_node, left_node, right_node];\r\n    }\r\n    return null;//left_node;//old_node.left;\r\n  }\r\n\r\n\r\n  // 삭제시, \r\n  // 자신과 형제노드 - 부모노드 간의 연결을 해제하고\r\n  // 조부모노드와 자신의 정보를 연결해준다.\r\n  remove(grand_node, parent_node, del_node) {\r\n    console.log(\"===========delete 1회============\");    \r\n    // 조부모 노드의 존재 여부에 따라 로직이 달라짐\r\n    if (grand_node) {\r\n\r\n      // 형제 노드의 p_id를 바꿔준다.\r\n      // 삭제할 노드의 위치가 Left?\r\n      if (parent_node.left.id === del_node.id) {\r\n        parent_node.right.p_id = grand_node.id;\r\n\r\n        // 부모의 inset 값을 형제노드에 대입해준다.\r\n        this.copy_inset(parent_node, parent_node.right);\r\n        parent_node.right.ratio = parent_node.ratio;\r\n\r\n        //parent_node.right.node_text    = parent_node.node_text;\r\n\r\n        // 삭제할 노드의 부모노드가 조부모노드 기준 L? R? 체크\r\n        if (grand_node.left.id === parent_node.id) {\r\n          grand_node.left = parent_node.right;\r\n        } else {\r\n          grand_node.right = parent_node.right;\r\n        }\r\n      } else {\r\n        parent_node.left.p_id = grand_node.id;\r\n\r\n        // 부모의 inset 값을 형제노드에 대입해준다.\r\n        this.copy_inset(parent_node, parent_node.left);\r\n        parent_node.left.ratio = parent_node.ratio;\r\n        \r\n        //parent_node.left.node_text    = parent_node.node_text;        \r\n\r\n        // 삭제할 노드의 부모노드가 조부모노드 기준 L? R? 체크\r\n        if (grand_node.left.id === parent_node.id) {\r\n          grand_node.left = parent_node.left;\r\n        } else {\r\n          grand_node.right = parent_node.left;\r\n        }          \r\n      }\r\n    } else {\r\n      // 삭제할 노드의 위치가 Left?\r\n      if (parent_node.left.id === del_node.id) {\r\n        parent_node.right.p_id = null;\r\n\r\n        // 부모의 inset 값을 형제노드에 대입해준다.\r\n        this.copy_inset(parent_node, parent_node.right);\r\n        parent_node.right.ratio = parent_node.ratio;\r\n\r\n        //parent_node.right.node_text    = parent_node.node_text;\r\n      } else {\r\n        parent_node.left.p_id = null;\r\n\r\n        // 부모의 inset 값을 형제노드에 대입해준다.\r\n        this.copy_inset(parent_node, parent_node.left);\r\n        parent_node.left.ratio = parent_node.ratio;\r\n        \r\n        //parent_node.left.node_text    = parent_node.node_text;            \r\n      }\r\n      // // 부모노드와 삭제노드의 Type을 D(Delete)로 바꿔주고 형제노드 정보의 부모ID를 null로 바꾼다.(Root가 된다)\r\n      // // del_node.p_id = -1;\r\n      // del_node.node_type = \"D\";\r\n\r\n      // // parent_node.p_id  = -1;\r\n      // // parent_node.div_type = \"N\";\r\n      // parent_node.node_type = \"D\";\r\n\r\n      // parent_node.left  = null;\r\n      // parent_node.right = null;\r\n    }\r\n\r\n    // 부모노드와 삭제노드의 Type을 D(Delete)로 바꿔주고 형제노드 정보의 부모ID를 null로 바꾼다.(Root가 된다)\r\n    // del_node.p_id = -1;\r\n    del_node.node_type = \"D\";\r\n\r\n    // parent_node.p_id  = -1;\r\n    // parent_node.div_type = \"N\";\r\n    parent_node.node_type = \"D\";\r\n\r\n    parent_node.left  = null;\r\n    parent_node.right = null;    \r\n    // this.root = removeNode(this.root, del_id);\r\n    return false; \r\n  }\r\n\r\n  copy_inset(tmp_source, tmp_dst) {\r\n    tmp_dst.inset_top    = tmp_source.inset_top;\r\n    tmp_dst.inset_right  = tmp_source.inset_right;\r\n    tmp_dst.inset_bottom = tmp_source.inset_bottom;\r\n    tmp_dst.inset_left   = tmp_source.inset_left;\r\n  }\r\n\r\n  resize_div(tmp_arr) {\r\n    tmp_arr.forEach(tmp_node => {\r\n      // 인자가 부모 노드이면(= 노드타입이 P인 경우, 하위 노드의 inset 값을 재조정함. 하위 노드가 P인 경우도 마찬가지)\r\n      if (tmp_node.node_type === \"P\") {\r\n        let tmp_left  = tmp_node.left;\r\n        let tmp_right = tmp_node.right;\r\n\r\n        // inset OverWrite\r\n        this.copy_inset(tmp_node, tmp_left);\r\n        this.copy_inset(tmp_node, tmp_right);\r\n\r\n        // 부모의 분할 타입에 따라, 부모 대비 자식의 비율을 inset 값에 재조정해준다.\r\n        if (tmp_node.div_type === \"C\") {\r\n          // C = Col = 가로 = left / right\r\n          let tmp_width = (100 - (tmp_node.inset_left + tmp_node.inset_right));\r\n\r\n          tmp_left.inset_right = tmp_left.inset_right + (tmp_width * ((100 - tmp_left.ratio)  / 100));\r\n          tmp_right.inset_left = tmp_right.inset_left + (tmp_width * ((100 - tmp_right.ratio) / 100)); //tmp_right.ratio / 100));\r\n        } else {\r\n          // R = Row = 세로 = top / bottom\r\n          let tmp_height = (100 - (tmp_node.inset_top + tmp_node.inset_bottom));\r\n\r\n          tmp_left.inset_bottom = tmp_left.inset_bottom + (tmp_height * ((100 - tmp_left.ratio)  / 100));\r\n          tmp_right.inset_top   = tmp_right.inset_top   + (tmp_height * ((100 - tmp_right.ratio) / 100)); //tmp_right.ratio / 100));\r\n        }\r\n      }\r\n//      console.log(tmp_node);\r\n    });\r\n  }\r\n}","export function PercentToLength(aDefd_Length, aPer_1, aPer_2) {\r\n  // inset의 Percent는 각기 기준이 다르다.\r\n  // ex) Left(Top)     = 30% 이면, 좌측으로부터 30%만큼 떨어져있다는 뜻.\r\n  //     Right(Bottom) = 40% 이면, 우측으로부터 40%만큼 떨어져있다는 뜻.\r\n  // 즉, 좌측으로부터 30%, 우측으로부터 40%만큼의 길이는 100% - (Left(30) + Right(40)) => 30%가 자기의 길이다.\r\n  // 그 길이를 기준에 비해 얼마인지를 반환해주는 함수이다.\r\n  return (aDefd_Length * ((100 - (aPer_1 + aPer_2)) / 100));\r\n}\r\n\r\nexport function PercentToPx(aDef_Length, ainset) {\r\n  // inset의 Percent는 각기 기준이 다르다.\r\n  // Left와 Top의 퍼센트를 길이화 하면 기준 좌표가 나온다.\r\n  return (aDef_Length * (ainset / 100));\r\n}\r\n\r\nexport function Position_Check(aClientX, aPoint, aLength) {\r\n  // 위치를 체크해서 반환해준다.\r\n  if        ( (aClientX - aPoint) <= aLength) {\r\n    //  0 ~ 33%   = LT / L / LB\r\n    return 0;\r\n  } else if (((aClientX - aPoint) > aLength) && ((aClientX - aPoint) <= (aLength * 2))) {\r\n    // 34 ~ 66%   =  T / M / B\r\n    return 1;\r\n  } else {\r\n    // 67 ~ 100%  = RT / R / RB\r\n    return 2;\r\n  }\r\n}\r\n\r\nexport function Position_Fix(aResult_X, aResult_Y) {\r\n  switch (aResult_X) {\r\n    case 0:\r\n      switch (aResult_Y) {\r\n        case 0:\r\n          return \"LT\";\r\n        case 1:\r\n          return \"L\";\r\n        case 2:\r\n          return \"LB\";\r\n        default:\r\n          return \"N\";\r\n      }          \r\n    case 1:\r\n      switch (aResult_Y) {\r\n        case 0:\r\n          return \"T\";\r\n        case 1:\r\n          return \"N\";\r\n        case 2:\r\n          return \"B\";\r\n        default:\r\n          return \"N\";\r\n      }          \r\n    case 2:\r\n      switch (aResult_Y) {\r\n        case 0:\r\n          return \"RT\";\r\n        case 1:\r\n          return \"R\";\r\n        case 2:\r\n          return \"RB\";\r\n        default:\r\n          return \"N\";\r\n      }          \r\n    default:\r\n      return \"N\";\r\n  }\r\n}\r\n\r\nconst dot_point = {\r\n  tmp_x: 0,\r\n  tmp_y: 0\r\n};\r\n\r\nexport function calc_Triangle(p1, p2, p3) {\r\n    return Math.abs((p1.tmp_x * (p2.tmp_y - p3.tmp_y)) +\r\n                    (p2.tmp_x * (p3.tmp_y - p1.tmp_y)) +\r\n                    (p3.tmp_x * (p1.tmp_y - p2.tmp_y)));\r\n}\r\n\r\nexport function isInside_Triangle(p1, p2, p3, mp) {\r\n\tlet NN = calc_Triangle(p1, p2, p3);\r\n\tlet AA = calc_Triangle(mp, p2, p3);\r\n\tlet BB = calc_Triangle(p1, mp, p3);\r\n\tlet CC = calc_Triangle(p1, p2, mp);\r\n\r\n\treturn (NN === AA + BB + CC);\r\n}","<script>\r\n\t// import \"./App.svelte\";\r\n\t// import { listen } from \"svelte/internal\";\r\n\timport { Node } from \"./Binary_tree\";\r\n\t// import { Binary_Tree } from \"./Binary_tree\";\r\n\timport { PercentToLength, PercentToPx, Position_Check, Position_Fix } from \"./ufunction\";\r\n\r\n\texport let bst;\r\n\texport let idx;\r\n\texport let node_text_idx;\r\n\texport let arr;  \r\n\r\n\tlet drag_node = null;                 // Null or Node\r\n\tlet drag_state = \"N\";                 // N / T / R / B / L\r\n\tlet drag_bleft = false;               // T = Left / F = Right\r\n\tlet drop_id    = -1;\r\n\r\n// ==================================================================================================================================================\r\n// =================================================================== Button Event =================================================================\r\n// ==================================================================================================================================================\r\nconst Add_Div = (e) => {\r\n    // TODO inset 계산\r\n    console.log('===========DIV 추가===========');\r\n\r\n    // 0을 1|2로 Div 추가하기\r\n    const insert_result = bst.insert(arr[e.target.id], arr.length, node_text_idx);\r\n\r\n    if (insert_result) {\r\n      //arr.push(insert_result[0]);\r\n      //arr.push(insert_result[1]);\r\n      idx = idx + 2;\r\n      node_text_idx = node_text_idx + 1;\r\n\r\n      // setArr([...arr, insert_result[0], insert_result[1]]);\r\n\t\t\tarr = [...arr, insert_result[0], insert_result[1]];\r\n    };\r\n\r\n    //setArr([...arr]);\r\n    // setIdx(idx + 1);\r\n    console.log(arr);\r\n  };\r\n\r\n  // filter를 써서 새 배열 만들고 arr배열을 변경해줘야함.\r\n  const Del_Div = (e) => {\r\n    if (arr[e.id].p_id === null){\r\n      return false;\r\n    }\r\n\r\n    console.log('===========DIV 삭제===========');\r\n\r\n    // 기존 배열에서 inset 값을 변경 후 가져와야한다.\r\n    if (arr[arr[arr[e.id].p_id].p_id]) {\r\n      bst.remove(arr[arr[arr[e.id].p_id].p_id], arr[arr[e.id].p_id], arr[e.id]);\r\n    } else {\r\n      bst.remove(null, arr[arr[e.id].p_id], arr[e.id]);\r\n    } \r\n\r\n    // inset 재조정\r\n    bst.resize_div(arr);\r\n\r\n    // 배열 갱신\r\n\r\n    // setArr([...arr]);\r\n\t\tarr = [...arr];\r\n    console.log(arr);\r\n  };\r\n\r\n// ==================================================================================================================================================\r\n// =================================================================== Bar Event ====================================================================\r\n// ==================================================================================================================================================\r\nconst onMouseDown_bar_event = (e) => {\r\n    drag_node = null;\r\n\r\n    console.log(\"==============Bar Down=============\");\r\n\r\n    // 마우스 다운 이벤트 발생 => 마우스의 움직임에 따라, onMouseMove 이벤트를 유지한다(onMouseUp이 될 때까지 or onMouseLeave)\r\n    // 마우스 움직임에 따른 이벤트 등록\r\n    const bar = e.target;\r\n    bar.addEventListener('dragstart', onMouseDragstart_bar_event);\r\n    bar.addEventListener('drag',      onMouseDrag_bar_event);\r\n    bar.addEventListener('dragend',   onMouseDragend_bar_event);\r\n\r\n    // bar.addEventListener(\"touchmove\", onMouseDrag_bar_event, TOUCH_EVENT_OPTIONS);\r\n    // bar.addEventListener(\"touchend\", onMouseDragend_bar_event, true);\r\n\r\n    function onMouseDragstart_bar_event(event) {\r\n      console.log(\"============Bar Drag Start===========\");\r\n\r\n      // let cv = new ImageBitmap();\r\n      // cv.width  = 0;\r\n      // cv.height = 0;\r\n      // event.dataTransfer.setDragImage(cv, 0, 0);      \r\n    }    \r\n\r\n    function onMouseDrag_bar_event(event) {\r\n      console.log(\"==============Bar Drag=============\");\r\n      // console.log(event);\r\n      // event.dataTransfer.dragEffect = \"move\";\r\n      event.preventDefault();\r\n      // console.log(event.dataTransfer.dragEffect)\r\n      // event.dataTransfer.effectAllowed = \"move\";\r\n      // console.log(this);\r\n\r\n      // 배율 변경\r\n      if (event.x > 0 || event.y > 0) {\r\n        // 부모노드와 자식노드에 대한 내용을 변수에 받아온다.\r\n        let tmp_p = arr[parseInt(e.target.getAttribute('name'))];\r\n        let tmp_l = tmp_p.left;\r\n        let tmp_r = tmp_p.right;\r\n\r\n        let tmp_tree   = document.getElementById(\"div_tree\").offsetWidth;\r\n        let tmp_title  = document.getElementById(\"div_mosaic_menubar\").offsetHeight;\r\n        let tmp_width  = e.target.parentElement.offsetWidth;\r\n        let tmp_height = e.target.parentElement.offsetHeight;\r\n\r\n        // 현재 마우스의 좌표를 기준으로, 몇퍼센트인지 역계산을 해줘야한다.\r\n        // 대상의 부모의 Width와 Left 좌표값을 가지고 계산하면 된다.\r\n        // ((마우스의 현재 좌표 - 기준좌표)  / 부모의 길이) * 100\r\n        // 부모의 div type이 C | R 에 따라 다르다.\r\n        if (tmp_p.div_type === \"C\") {\r\n          // tmp_l.ratio = ((event.clientX - (tmp_p.inset_left * (window.innerWidth  / 100))) / (window.innerWidth))  * 100;\r\n          tmp_l.ratio = (((event.clientX - tmp_tree)  - (tmp_p.inset_left *  (tmp_width   / 100))) / (PercentToLength(tmp_width,  tmp_p.inset_left, tmp_p.inset_right ))) * 100;\r\n        } else {\r\n          // tmp_l.ratio = ((event.clientY - (tmp_p.inset_top  * (window.innerHeight / 100))) / (window.innerHeight)) * 100;\r\n          // tmp_l.ratio = (((event.clientY - tmp_title) - (tmp_p.inset_top  * ((tmp_height - tmp_title)  / 100))) / (PercentToLength((tmp_height - tmp_title), tmp_p.inset_top,  tmp_p.inset_bottom))) * 100;\r\n          tmp_l.ratio = (((event.clientY - tmp_title) - (tmp_p.inset_top  *  (tmp_height  / 100))) / (PercentToLength(tmp_height, tmp_p.inset_top,  tmp_p.inset_bottom))) * 100;\r\n        } \r\n        if (tmp_l.ratio < 15) {\r\n          tmp_l.ratio = 15;\r\n        } else if (tmp_l.ratio > 85) {\r\n          tmp_l.ratio = 85;\r\n        }\r\n        tmp_r.ratio = 100 - tmp_l.ratio;\r\n\r\n        // inset 재조정\r\n        bst.resize_div(arr);\r\n\r\n        // 배열 갱신\r\n        // setArr([...arr]);        \r\n\t\t\t\tarr = [...arr];\r\n\r\n        // console.log(\"=============client 좌표\");\r\n        // console.log(event.clientX + \" / \" + event.clientY);\r\n      };\r\n    }\r\n\r\n    function onMouseDragend_bar_event() {\r\n      console.log(\"==============Bar Up=============\");\r\n\r\n      bar.removeEventListener('dragstart', onMouseDragstart_bar_event);\r\n      bar.removeEventListener('drag',      onMouseDrag_bar_event);\r\n      bar.removeEventListener('dragend',   onMouseDragend_bar_event);\r\n\r\n      // bar.removeEventListener(\"touchmove\", onMouseDrag_bar_event,TOUCH_EVENT_OPTIONS);\r\n      // bar.removeEventListener(\"touchend\", onMouseDragend_bar_event, true);\r\n\r\n      console.log(arr);\r\n\r\n      // // inset 재조정\r\n      // bst.resize_div(arr);\r\n\r\n      // // 배열 갱신\r\n      // setArr([...arr]);\r\n    }    \r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ==================================================================================================================================================\r\n// =================================================================== Div Event ====================================================================\r\n// ==================================================================================================================================================\r\nconst onDragStart_div_event = (e) => {\r\n    console.log(\"==============Div Drag Start=============\");  \r\n    //console.log(\"Node id = \" + e.target.parentElement.getAttribute(\"name\") + \" / X 좌표 = \" + e.clientX + \" / 좌표 Y = \" + e.clientY);\r\n    //console.log(e.target);\r\n    // e.preventDefault();\r\n    // console.log(drag_node);\r\n\r\n    // 마우스 Over 이벤트 발생 => 마우스의 움직임에 따라, onMouseMove 이벤트를 유지한다(onMouseUp이 될 때까지 or onMouseLeave)\r\n    drag_node  = arr[parseInt(e.target.parentElement.getAttribute(\"name\"))];\r\n    drag_state = \"N\";\r\n    drag_bleft = false;\r\n    drop_id    = parseInt(e.target.parentElement.getAttribute(\"name\"));\r\n\r\n    // 드래그가 시작된 노드를 기준으로 \r\n    let tmp_p_node  = null;\r\n    let tmp_c_node  = null;\r\n    let tmp_c2_node = null;\r\n    let tmp_el      = null;\r\n\r\n    if (drag_node.p_id !== null) {\r\n      tmp_p_node = arr[drag_node.p_id];\r\n\r\n      // Drag Node가 L인지 R인지 체크\r\n      if (tmp_p_node.left.id === drag_node.id) {\r\n        tmp_c_node  = tmp_p_node.right;\r\n        tmp_c2_node = tmp_p_node.left;\r\n      } else {\r\n        tmp_c_node  = tmp_p_node.left;\r\n        tmp_c2_node = tmp_p_node.right;\r\n      }\r\n\r\n      // 1. 형제 노드의 크기를 부모 노드의 크기만큼 늘려서 Arr[] 에 넣어주고\r\n      bst.copy_inset(tmp_p_node, tmp_c_node);\r\n      tmp_c_node.ratio  = 100;\r\n      tmp_c2_node.ratio = 0;\r\n\r\n      // 2. 형제 노드의 Element의 inset 값도 강제로 바꿔주고\r\n      // tmp_el = document.getElementsByName(tmp_c_node.id);\r\n      tmp_el = document.getElementsByName(tmp_c_node.id);\r\n      tmp_el[0].style.inset = `${tmp_p_node.inset_top}% ${tmp_p_node.inset_right}% ${tmp_p_node.inset_bottom}% ${tmp_p_node.inset_left}%`;\r\n      \r\n      // 3. 바도 감추고\r\n      tmp_el = document.getElementsByName(tmp_p_node.id);\r\n      tmp_el[0].style.display = 'none';\r\n\r\n      // 4. 자신도 감춘다.\r\n      tmp_el = document.getElementsByName(drag_node.id);\r\n      tmp_el[0].style.zIndex = 2;\r\n      // tmp_el[0].style.pointerEvents = false;\r\n      tmp_el[0].style.opacity = 0;\r\n    }\r\n  }\r\n\r\n  const onDragenter_div_event = (e) => {\r\n    if (drag_node === null) {\r\n      return false;\r\n    }\r\n\r\n    console.log(\"==============Div enter=============\");  \r\n    // e.preventDefault();\r\n\r\n    // drop_id가 -1이 아니고 나 자신이 아닐때 drag_node의 zindex를 뒤로 보낸다!\r\n    if ((drop_id !== -1) || (drop_id !== drag_node.id)) {\r\n      let tmp_el = document.getElementsByName(drag_node.id);\r\n      tmp_el[0].style.zIndex = 0;\r\n    }\r\n\r\n    // drag_node이면 제외하고 재계산 해줘야한다.\r\n    arr.forEach(tmp_node => {\r\n      // if (tmp_node.p_id !== tmp_p_node.id) {\r\n      // if (tmp_node.p_id !== arr[drag_node.p_id].id) \r\n      {\r\n        // 인자가 부모 노드이면(= 노드타입이 P인 경우, 하위 노드의 inset 값을 재조정함. 하위 노드가 P인 경우도 마찬가지)\r\n        if (tmp_node.node_type === \"P\") {\r\n          let tmp_left  = tmp_node.left;\r\n          let tmp_right = tmp_node.right;\r\n  \r\n          // inset OverWrite\r\n          bst.copy_inset(tmp_node, tmp_left);\r\n          bst.copy_inset(tmp_node, tmp_right);\r\n  \r\n          // 부모의 분할 타입에 따라, 부모 대비 자식의 비율을 inset 값에 재조정해준다.\r\n          if (tmp_node.div_type === \"C\") {\r\n            // C = Col = 가로 = left / right\r\n            let tmp_width = (100 - (tmp_node.inset_left + tmp_node.inset_right));\r\n  \r\n            tmp_left.inset_right = tmp_left.inset_right + (tmp_width * ((100 - tmp_left.ratio)  / 100));\r\n            tmp_right.inset_left = tmp_right.inset_left + (tmp_width * ((100 - tmp_right.ratio) / 100)); //tmp_right.ratio / 100));\r\n          } else {\r\n            // R = Row = 세로 = top / bottom\r\n            let tmp_height = (100 - (tmp_node.inset_top + tmp_node.inset_bottom));\r\n  \r\n            tmp_left.inset_bottom = tmp_left.inset_bottom + (tmp_height * ((100 - tmp_left.ratio)  / 100));\r\n            tmp_right.inset_top   = tmp_right.inset_top   + (tmp_height * ((100 - tmp_right.ratio) / 100)); //tmp_right.ratio / 100));\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    console.log('inset 재계산 이후');\r\n    console.log(arr);\r\n\r\n    let tmp_el = null;\r\n    arr.forEach(tmp_node => {\r\n      // 인자가 부모 노드이면(= 노드타입이 C인 경우, 화면에 출력\r\n      if        (tmp_node.node_type === \"C\") {\r\n        tmp_el = document.getElementsByName(tmp_node.id);\r\n        tmp_el[0].style.inset = `${tmp_node.inset_top}% ${tmp_node.inset_right}% ${tmp_node.inset_bottom}% ${tmp_node.inset_left}%`;\r\n      } else if (tmp_node.node_type === \"P\") {\r\n        tmp_el = document.getElementsByName(tmp_node.id);\r\n        tmp_el[0].style.inset = `${tmp_node.right.inset_top}% ${tmp_node.right.inset_right}% ${tmp_node.right.inset_bottom}% ${tmp_node.right.inset_left}%`;\r\n      }\r\n    });\r\n\r\n    // 마우스 Over 이벤트 발생 => 마우스의 움직임에 따라, onMouseMove 이벤트를 유지한다(onMouseUp이 될 때까지 or onMouseLeave)\r\n    if (e.target.parentElement.getAttribute(\"name\") === \"root\") {\r\n      drop_id = parseInt(e.target.id);\r\n    } else {\r\n      drop_id = parseInt(e.target.parentElement.getAttribute(\"name\"));\r\n    }\r\n  }  \r\n\r\n  const onDragOver_div_event = (e) => {  \r\n    if (drag_node === null) {\r\n      return false;\r\n    }\r\n\r\n    console.log(\"==============Drag Over=============\");\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = \"move\";\r\n\r\n    let shadow_div = document.getElementById(\"shadow\");\r\n    let tmp_node   = null;\r\n\r\n    if (e.target.parentElement.getAttribute(\"name\") === \"root\") {\r\n      tmp_node = arr[parseInt(e.target.id)];\r\n    } else {\r\n      tmp_node = arr[parseInt(e.target.parentElement.getAttribute(\"name\"))];\r\n    }\r\n    console.log(tmp_node);    \r\n\r\n    let tmp_tree   = document.getElementById(\"div_tree\").offsetWidth;\r\n    let tmp_title  = document.getElementById(\"div_mosaic_menubar\").offsetHeight;\r\n    let tmp_width  = document.getElementById(\"div_mosaic_body\").offsetWidth;\r\n    let tmp_height = document.getElementById(\"div_mosaic_body\").offsetHeight;\r\n    \r\n    let point_x      = PercentToPx(tmp_width,  tmp_node.inset_left);\r\n    let point_y      = PercentToPx(tmp_height, tmp_node.inset_top);\r\n    let point_width  = PercentToLength(tmp_width,  tmp_node.inset_left, tmp_node.inset_right);\r\n    let point_height = PercentToLength(tmp_height, tmp_node.inset_top,  tmp_node.inset_bottom);\r\n\r\n    // console.log(\"==============Drag Over=============\");\r\n    // console.log(\"Node id = \" + e.target.parentElement.getAttribute(\"name\") + \" / X 좌표 = \" + e.clientX + \" / 좌표 Y = \" + e.clientY);\r\n    //console.log(e.target);\r\n\r\n    // 마우스 움직임에 따른 이벤트 \r\n    // target의 영역 기준으로 마우스 좌표가 9등분 중에 어디에 속해있는지 확인해야한다.\r\n    // Left(x) / Top(y) / Width(px) / Height(px)을 입력하면 LT ~ RB(1 ~ 9) 중에 어디인지 반환해준다.\r\n    let tmp_width_length  = (point_width  * 0.33);\r\n    let tmp_height_length = (point_height * 0.33);\r\n\r\n    let result_X = Position_Check((e.clientX - tmp_tree),  point_x, tmp_width_length);\r\n    let result_Y = Position_Check((e.clientY - tmp_title), point_y, tmp_height_length);    \r\n\r\n    // point_width 의 위치를 찾고, 결정한다.\r\n    let tmp_position = Position_Fix(result_X, result_Y);\r\n    // console.log(tmp_position);\r\n\r\n    // 겹치는 부분이 있으면 좀 다르게 처리해야함.\r\n    if        (tmp_position === \"LT\") {\r\n      if (drag_state !== \"T\") {drag_state = \"L\"}\r\n    } else if (tmp_position === \"RT\") {\r\n      if (drag_state !== \"T\") {drag_state = \"R\"}\r\n    } else if (tmp_position === \"LB\") {\r\n      if (drag_state !== \"B\") {drag_state = \"L\"}\r\n    } else if (tmp_position === \"RB\") {\r\n      if (drag_state !== \"B\") {drag_state = \"R\"}\r\n    } else                    {drag_state = tmp_position}\r\n\r\n    if ((tmp_position === \"L\") || (tmp_position === \"T\")){drag_bleft = true}\r\n    else                                                 {drag_bleft = false}\r\n    // console.log(drag_state);\r\n\r\n    // 현재 마우스의 X, Y 좌표에 따라, 어떤 구역에 속해있는지 확인해서 쉐도우 DIV를 뿌려준다.\r\n    switch (drag_state) {\r\n      case \"T\":\r\n        shadow_div.style.inset = `${tmp_node.inset_top}% ${tmp_node.inset_right}% ${tmp_node.inset_bottom + ((100 - (tmp_node.inset_top + tmp_node.inset_bottom)) / 2)}% ${tmp_node.inset_left}%`;\r\n        break;\r\n      case \"R\":\r\n        shadow_div.style.inset = `${tmp_node.inset_top}% ${tmp_node.inset_right}% ${tmp_node.inset_bottom}% ${tmp_node.inset_left + ((100 - (tmp_node.inset_left + tmp_node.inset_right)) / 2)}%`;\r\n        break;\r\n      case \"B\":\r\n        shadow_div.style.inset = `${tmp_node.inset_top + ((100 - (tmp_node.inset_top + tmp_node.inset_bottom)) / 2)}% ${tmp_node.inset_right}% ${tmp_node.inset_bottom}% ${tmp_node.inset_left}%`;\r\n        break;\r\n      // default: // L\r\n      case \"L\":\r\n        shadow_div.style.inset = `${tmp_node.inset_top}% ${tmp_node.inset_right + ((100 - (tmp_node.inset_left + tmp_node.inset_right)) / 2)}% ${tmp_node.inset_bottom}% ${tmp_node.inset_left}%`;\r\n        break;\r\n    }          \r\n    shadow_div.style.display = 'block';\r\n    shadow_div.style.zIndex  = 100;\r\n\r\n    // console.log(tmp_position);\r\n    // console.log(drag_state);\r\n    // console.log(drag_bleft);\r\n  }  \r\n\r\n  const onDragEnd_div_event = (e) => {  \r\n    if (drag_node === null) {\r\n      return false;\r\n    }\r\n    // e.preventDefault();\r\n\r\n    let shadow_div = document.getElementById(\"shadow\");\r\n\r\n    console.log(\"DragEnd\");\r\n    shadow_div.style.display = 'none';\r\n    shadow_div.style.zIndex  = -1;\r\n\r\n    console.log(\"==============Drop=============\");\r\n    console.log(\"Node id = \" + drop_id);\r\n    // console.log(\"Node id = \" + e.target.parentElement.getAttribute(\"name\") + \" / X 좌표 = \" + e.clientX + \" / 좌표 Y = \" + e.clientY);\r\n    // console.log(e.target.parentElement);\r\n    // console.log(e.target.parentElement.getAttribute(\"name\"));\r\n\r\n    //if (e.target.tagName !== \"BUTTON\") {\r\n    if (drag_node.id !== drop_id) {\r\n      // 위치에 따라, Col | Row   /   Left | Right 를 지정하여 Insert / remove 해줘야한다.\r\n      const change_result = bst.change(arr[drop_id], arr.length, drag_node, drag_state, drag_bleft);\r\n\r\n      if (change_result) {\r\n        idx = idx + 2;\r\n        // node_text_idx = node_text_idx + 1;\r\n\r\n        arr.push(change_result[0]);\r\n        arr.push(change_result[1]);\r\n        // setArr([...arr, change_result[0], change_result[1]]);\r\n      };\r\n\r\n      // 기존 배열에서 inset 값을 변경 후 가져와야한다.\r\n      if (arr[arr[arr[drag_node.id].p_id].p_id]) {\r\n        bst.remove(arr[arr[arr[drag_node.id].p_id].p_id], arr[arr[drag_node.id].p_id], arr[drag_node.id]);\r\n      } else {\r\n        bst.remove(null, arr[arr[drag_node.id].p_id], arr[drag_node.id]);\r\n      } \r\n      // drag_node = null;\r\n      // inset 재조정\r\n      bst.resize_div(arr);\r\n\r\n      console.log(\"==============Drop after Log=============\");\r\n      console.log(drag_node);\r\n      console.log(drag_state);\r\n      console.log(drag_bleft);\r\n      console.log(arr);\r\n\r\n      // 배열 갱신\r\n      // setArr([...arr]);\r\n\t\t\tarr = [...arr];\r\n    }\r\n    //}\r\n    drag_node  = null;\r\n    drag_state = \"N\";\r\n    drag_bleft = false;\r\n    drop_id    = -1;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tif (bst.root == null) {\r\n\t\tconsole.log(\"===========Root 생성===========\");\r\n    bst.root = new Node(idx, \"N\", \"C\", \"windows \" + (node_text_idx + 1), 0, 0, 0, 0, 100);\r\n    arr = [bst.root];\r\n    // setArr([bst.root]);\r\n\t\t//arr.push(bst.root);\r\n    node_text_idx = node_text_idx + 1;\r\n\r\n    console.log(arr);\r\n\t\tconsole.log('------------Mosaic.svelte');\r\n\t};\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<!-- {#each arr as list}\r\n\t<div>{list.div_type}</div>\r\n{/each} -->\r\n\r\n<!--  on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event} -->\r\n<!-- HTML 태그 -->\r\n\r\n{console.log(\"반복문 진행\")}\r\n{#each arr as item}\r\n\t{console.log(item.node_type)}\r\n\t\r\n  <!-- <li>{i + 1} : {item.div_type}</li>  -->\r\n\t<!-- Node_Type = P 이면, 부모 타입 이므로, 자식 노드에 관련된 노드를 느려야한다. -->\r\n\t{#if item.node_type == \"P\"}\r\n\t\t<!-- 부모 Node가 없을 때 => Root -->\r\n\t\t{#if item.p_id == null}\r\n\t\t\t<div\r\n\t\t\t\tclass=\"div_Main_Background\" name={\"root_\"+item.id} id={item.id} on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event}\r\n\t\t\t\tstyle=\"inset: 0%\">\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if item.div_type === \"C\"}\r\n\t\t\t<div \r\n\t\t\t\tclass=\"div_Col\" name={item.id} draggable=\"true\" on:mousedown={onMouseDown_bar_event}\r\n\t\t\t\tstyle={\"inset: \" + `${item.right.inset_top}% ${item.right.inset_right}% ${item.right.inset_bottom}% ${item.right.inset_left}%`}>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if item.div_type === \"R\"}\r\n\t\t\t<div \r\n\t\t\t\tclass=\"div_Row\" name={item.id} draggable=\"true\" on:mousedown={onMouseDown_bar_event}\r\n\t\t\t\tstyle={\"inset: \" + `${item.right.inset_top}% ${item.right.inset_right}% ${item.right.inset_bottom}% ${item.right.inset_left}%`}>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\r\n\t\t<!-- Left, Right Node가 자식노드 타입이면 화면에 표시해준다 -->\r\n\t\t{#if item.left.node_type === \"C\"}\r\n\t\t\t<div\r\n\t\t\t\tclass=\"div_Background\" name={item.left.id} on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event}\r\n\t\t\t\tstyle={\"inset: \" + `${item.left.inset_top}% ${item.left.inset_right}% ${item.left.inset_bottom}% ${item.left.inset_left}%`}\r\n\t\t\t>\r\n\t\t\t\t<div class=\"div_Title\" draggable=\"true\" on:dragstart={onDragStart_div_event}>\r\n\t\t\t\t\t<button on:click={Add_Div} id={item.left.id}>추가</button>\r\n\t\t\t\t\t<button on:click={()=>{Del_Div(item.left)}}>삭제</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"div_Body\">{item.left.node_text}</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if item.right.node_type === \"C\"}\r\n\t\t\t<div\r\n\t\t\tclass=\"div_Background\" name={item.right.id} on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event}\r\n\t\t\tstyle={\"inset: \" + `${item.right.inset_top}% ${item.right.inset_right}% ${item.right.inset_bottom}% ${item.right.inset_left}%`}\r\n\t\t\t>\r\n\t\t\t\t<div class=\"div_Title\" draggable=\"true\" on:dragstart={onDragStart_div_event}>\r\n\t\t\t\t\t<button on:click={Add_Div} id={item.right.id}>추가</button>\r\n\t\t\t\t\t<button on:click={()=>{Del_Div(item.right)}}>삭제</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"div_Body\">{item.right.node_text}</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t{:else if (item.div_type === \"N\" && item.node_type !== \"D\" && item.p_id == null)}\r\n\t\t{console.log(\"Root 출력\")}\r\n\t\t<div\r\n\t\t\tclass=\"div_Main_Background\" name={\"root_\"+item.id} id={item.id} on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event}\r\n\t\t\tstyle={\"inset: \"+`0%`}>\r\n\t\t</div>\r\n\t\t<div\r\n\t\t\tclass=\"div_Background\" name={item.id} on:dragover={onDragOver_div_event} on:dragend={onDragEnd_div_event} on:dragenter={onDragenter_div_event}\r\n\t\t\tstyle={\"inset: \" + `${item.inset_top}% ${item.inset_right}% ${item.inset_bottom}% ${item.inset_left}%`}\r\n\t\t>\r\n\t\t\t<div class=\"div_Title\" style={\"cursor: \" + 'default'}> \r\n\t\t\t\t<button on:click={Add_Div} id={item.id}>추가</button>\r\n\t\t\t\t<button on:click={()=>{Del_Div(item)}}>삭제</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"div_Body\">{item.node_text}</div>\r\n\t\t</div>\r\n\t{/if}\r\n{/each}\r\n\r\n<!-- export default Mosaic; -->","<li>\n    <span class=\"tree_label\">\n        <slot />\n    </span>\n</li>\n\n<style>\n    li {\n        line-height: 1.2;\n        position: relative;\n        padding: 0 0 1em 1em;\n    }\n\n    .tree_label {\n        position: relative;\n        display: inline-block;\n    }\n\n</style>\n","<script context=\"module\">\n    let counter = 0;\n</script>\n\n<script >import TreeLeaf from \"./TreeLeaf.svelte\";\nexport let rootContent = \"Root element missing\";\nexport let defaultClosed = false;\nlet inputId = \"input_\" + counter++;\n</script>\n\n<li>\n    <input type=\"checkbox\" checked={!defaultClosed} id={inputId} />\n    <label class=\"tree_label\" for={inputId}>\n        <slot name=\"root\">\n            {rootContent}\n        </slot>\n    </label>\n    <ul>\n        <slot name=\"children\">\n            <slot>\n                <TreeLeaf>Leaf element missing</TreeLeaf>\n                <TreeLeaf>Leaf element missing</TreeLeaf>\n            </slot>\n        </slot>\n    </ul>\n</li>\n\n<style>\n    /* ————————————————————–\n    Tree core styles\n    */\n    input {\n        position: absolute;\n        clip: rect(0, 0, 0, 0);\n    }\n    input ~ ul {\n        display: none;\n    }\n    input:checked ~ ul {\n        display: block;\n    }\n\n    /* ————————————————————–\n    Tree rows\n    */\n    li {\n        line-height: 1.2;\n        position: relative;\n        padding: 0 0 1em 1em;\n    }\n\n    /* ————————————————————–\n    Tree labels\n    */\n    .tree_label {\n        position: relative;\n        display: inline-block;\n\n        cursor: pointer;\n    }\n\n    .tree_label:hover {\n        color: var(--branch-hover-color);\n    }\n\n    /* ————————————————————–\n    Tree expanded icon\n    */\n    .tree_label:before {\n        background: var(--icon-background-color);\n        color: var(--icon-color);\n        position: relative;\n        z-index: 1;\n        float: left;\n        margin: 0 1em 0 -2em;\n        width: 1em;\n        height: 1em;\n        border-radius: 1em;\n        content: \"+\";\n        text-align: center;\n        line-height: 0.9em;\n    }\n    :checked ~ .tree_label:before {\n        content: \"–\";\n    }\n\n    /* ————————————————————–\n    Tree branches\n    */\n    .tree_label:after {\n        border-bottom: 0;\n    }\n\n    :checked ~ label.tree_label:after {\n        border-radius: 0 0.3em 0 0;\n        border-top: 2px solid var(--line-color);\n        border-right: 2px solid var(--line-color);\n        border-bottom: 0;\n        border-left: 0;\n        bottom: 0;\n        top: 0.5em;\n        height: auto;\n    }\n</style>\n","<script>\n\texport let lineColor = '#e7e7e7';\n\texport let iconBackgroundColor = '#ffffff';\n\texport let iconColor = '#c2c2c2';\n\texport let branchHoverColor = '#cccccc';\n</script>\n\n<ul\n\tclass=\"tree\"\n\tstyle=\"--line-color: {lineColor}; --icon-background-color:{iconBackgroundColor}; --icon-color:{iconColor}; --branch-hover-color:{branchHoverColor}\"\n>\n\t<slot />\n</ul>\n\n<style>\n\t.tree {\n\t\tmargin: 1em;\n\t\tbox-sizing: content-box;\n\t}\n\n\t.tree :global(ul) {\n\t\tlist-style-type: none;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\n\t.tree :global(ul li) {\n\t\tpadding: 1em 0 0 1em;\n\t}\n\n\t.tree > :global(li:last-child) {\n\t\tpadding-bottom: 0;\n\t}\n\n\t.tree :global(li:last-child:before) {\n\t\theight: 1em;\n\t\tbottom: auto;\n\t}\n\n\t.tree > :global(li:last-child:before) {\n\t\tdisplay: none;\n\t}\n\n\t/* ————————————————————–\n    Tree branches\n    */\n\t.tree :global(.tree_label:after) {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: -1.5em;\n\t\tdisplay: block;\n\t\theight: 0.5em;\n\t\twidth: 1em;\n\t\tborder-bottom: 2px solid var(--line-color);\n\t\tborder-left: 2px solid var(--line-color);\n\t\tborder-radius: 0 0 0 0.3em;\n\t\tcontent: '';\n\t}\n\n\t.tree :global(li:before) {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tleft: -0.5em;\n\t\tdisplay: block;\n\t\twidth: 0;\n\t\tborder-left: 2px solid var(--line-color);\n\t\tcontent: '';\n\t}\n</style>\n","<script>\r\n  import { element } from \"svelte/internal\";\r\n  import TreeBranch from '../node_modules/svelte-tree-view-component/TreeBranch.svelte';\r\n  import TreeLeaf from '../node_modules/svelte-tree-view-component/TreeLeaf.svelte';\r\n  import TreeView from '../node_modules/svelte-tree-view-component/TreeView.svelte';\r\n\r\n\r\n  let linuxHostCount = 0;\r\n  let name = \"world\";\r\n  function assign() {\r\n    name = \"test\";\r\n  }\r\n\r\n\r\n</script>\r\n\r\n<button on:click={assign}>asign</button>\r\n<input type=\"text\" bind:value={name} />\r\n\r\n<TreeView \r\n    lineColor='white'\r\n    iconColor='black' >\r\n  <TreeBranch rootContent=\"Linux\">\r\n      <TreeLeaf>Linux1</TreeLeaf>\r\n      <TreeLeaf>Linux1</TreeLeaf>\r\n      <TreeLeaf>C#</TreeLeaf>\r\n  </TreeBranch>\r\n  <TreeBranch rootContent=\"Windows\">\r\n      <TreeLeaf>Svelte</TreeLeaf>\r\n      <TreeLeaf>React</TreeLeaf>\r\n  </TreeBranch>\r\n</TreeView>\r\n\r\n\r\n","<script>\r\n  // export let url = \"\";\r\n\r\n\r\n  // import tree from './Tree.svelte';\r\n  // import jnp from './Jnp.svelte';\r\n  import Mosaic from './Mosaic.svelte';\r\n  // import grid from './Grid.svelte';\r\n\r\n\timport { Node } from \"./Binary_tree\";\r\n\timport { Binary_Tree } from \"./Binary_tree\";\r\n  import OntuneTreeView from './ontuneTreeView.svelte';\r\n\r\n\r\n\tconst bst = new Binary_Tree();\r\n  const mosaic_props = {\r\n    bst : bst,\r\n    idx : 0,\r\n    node_text_idx: 0,\r\n    arr: []\r\n  };\r\n\r\n\t// let idx = 0;\r\n\t// let node_text_idx = 0;  \r\n\t// let arr = [];\r\n  // let a = new Node;  \r\n  // arr.push(a);\r\n\r\n  console.log(\"----------- App.svelte\");  \r\n  console.log(mosaic_props.arr);\r\n\r\n\r\n  // function change_arr (e) {\r\n      // \t// TODO inset 계산\r\n      // \tconsole.log('===========DB Arr 버튼 클릭===========');\r\n      // \t// console.log(e.target.name);\r\n      // \t// // 0을 1|2로 Div 추가하기\r\n      // \t// const insert_result = bst.insert(arr[e.target.id], arr.length, node_text_idx);\r\n      // \t// e.preventDefault();\r\n\r\n      // \tlet tmp_index = 0;\r\n      // \tlet tmp_button = null;\r\n\r\n      // \t// Init Button Style\r\n      // \tfor (let index = 0; index <= 4; index++) {\r\n      // \t\t// tmp_button = document.getElementsByName('P' + (index).toString)[0];\r\n      // \t\ttmp_button = document.getElementsByName('P' + String(index + 1))[0];\r\n      // \t\ttmp_button.style = 'background-color: buttonface; color: buttontext; font-weight: normal';\r\n      // \t}\r\n\r\n      // \t// Set Button Style\r\n      // \ttmp_button = document.getElementsByName(e.target.name)[0];\r\n      // \ttmp_button.style = 'background-color: darksalmon; color: blue; font-weight: bold';\r\n\r\n      // \tswitch (e.target.name) {\r\n      // \t\tcase \"P1\":\r\n      // \t\t\ttmp_index = 0;\r\n      // \t\t\tbreak;\r\n      // \t\tcase \"P2\":\r\n      // \t\t\ttmp_index = 1;\r\n      // \t\t\tbreak;\r\n      // \t\tcase \"P3\":\r\n      // \t\t\ttmp_index = 2;\r\n      // \t\t\tbreak;\r\n      // \t\tcase \"P4\":\r\n      // \t\t\ttmp_index = 3;\r\n      // \t\t\tbreak;\r\n      // \t\tcase \"P5\":\r\n      // \t\t\ttmp_index = 4;\r\n      // \t\t\tbreak;\r\n      // \t}\r\n\r\n      // \t// App - arr 배열을 선택한 배열로 Copy 해주고 랜더링~\r\n      // \tconsole.log(tmp_index);\r\n      // \t// App(arr[tmp_index]);\r\n      // };\r\n\r\n      // function save_arr (e) {\r\n      // \t// TODO inset 계산\r\n      // \tconsole.log('===========Save 버튼 클릭===========');\r\n      // \talert('저장이 완료되었습니다!(미구현)');\r\n      // }\r\n\r\n  function onMouseDown_Main_bar_event(e) {\r\n    // drag_node = null;\r\n\r\n    console.log(\"============Main Bar Down===========\");\r\n\r\n    // 마우스 다운 이벤트 발생 => 마우스의 움직임에 따라, onMouseMove 이벤트를 유지한다(onMouseUp이 될 때까지 or onMouseLeave)\r\n    // 마우스 움직임에 따른 이벤트 등록\r\n    let main_bar = e.target;\r\n    main_bar.addEventListener('dragstart', onMouseDragstart_Main_bar_event);\r\n    main_bar.addEventListener('drag',      onMouseDrag_Main_bar_event);\r\n    main_bar.addEventListener('dragend',   onMouseDragend_Main_bar_event);\r\n\r\n    // bar.addEventListener(\"touchmove\", onMouseDrag_bar_event, TOUCH_EVENT_OPTIONS);\r\n    // bar.addEventListener(\"touchend\", onMouseDragend_bar_event, true);\r\n\r\n    function onMouseDragstart_Main_bar_event(event) {\r\n      console.log(\"==========Main Bar Drag Start=========\");\r\n\r\n      // let cv = new ImageBitmap();\r\n      // cv.width  = 0;\r\n      // cv.height = 0;\r\n      // event.dataTransfer.setDragImage(cv, 0, 0);      \r\n    }    \r\n\r\n    function onMouseDrag_Main_bar_event(event) {\r\n      console.log(\"===========Main Bar Drag===========\");\r\n      event.preventDefault();\r\n\r\n      // 배율 변경\r\n      if (event.x > 0 || event.y > 0) {\r\n        let tmp_ratio = 0;\r\n        let tmp_A = document.getElementById(\"div_tree\");\r\n        let tmp_B = document.getElementById(\"div_mosaic\");\r\n        let tmp_C = document.getElementById(\"div_mosaic_main\");\r\n        let tmp_D = document.getElementById(\"div_grid\");\r\n\r\n        // 현재 마우스의 좌표를 기준으로, 몇퍼센트인지 역계산을 해줘야한다.\r\n        // (마우스의 현재 좌표 / 부모의 길이) * 100\r\n        // 대상이 main_Col | main_Row 에 따라 다르다.\r\n        if (main_bar.id === \"main_Col\") {\r\n          tmp_ratio = ((event.clientX)      / window.innerWidth)  * 100;\r\n        } else {\r\n          tmp_ratio = ((event.clientY - 40) / window.innerHeight) * 100;\r\n        } \r\n        if (tmp_ratio < 15) {\r\n          tmp_ratio = 15;\r\n        } else if (tmp_ratio > 85) {\r\n          tmp_ratio = 85;\r\n        }\r\n\r\n        // debugger;\r\n        if (main_bar.id === \"main_Col\") {\r\n          tmp_A.style.width  =        tmp_ratio  + '%';\r\n          tmp_B.style.width  = (100 - tmp_ratio) + '%';\r\n\r\n          console.log( tmp_A.style.width);\r\n          console.log( tmp_B.style.width);\r\n        } else {\r\n          tmp_C.style.height =        tmp_ratio  + '%';\r\n          tmp_D.style.height = (100 - tmp_ratio) + '%';\r\n\r\n          console.log( tmp_C.style.height);\r\n          console.log( tmp_D.style.height);\r\n        }             \r\n        // `${e.right.inset_top}% ${e.right.inset_right}% ${e.right.inset_bottom}% ${e.right.inset_left}%` \r\n        // tmp_r.ratio = 100 - tmp_l.ratio;\r\n\r\n        // // inset 재조정\r\n        // bst.resize_div(arr);\r\n\r\n        // // 배열 갱신\r\n        // setArr([...arr]);        \r\n\r\n        // console.log(\"=============client 좌표\");\r\n        // console.log(event.clientX + \" / \" + event.clientY);\r\n      };\r\n    }\r\n\r\n    function onMouseDragend_Main_bar_event() {\r\n      console.log(\"============Main Bar Up===========\");\r\n\r\n      main_bar.removeEventListener('dragstart', onMouseDragstart_Main_bar_event);          \r\n      main_bar.removeEventListener('drag',      onMouseDrag_Main_bar_event);\r\n      main_bar.removeEventListener('dragend',   onMouseDragend_Main_bar_event);\r\n\r\n      // bar.removeEventListener(\"touchmove\", onMouseDrag_bar_event,TOUCH_EVENT_OPTIONS);\r\n      // bar.removeEventListener(\"touchend\", onMouseDragend_bar_event, true);\r\n\r\n      // console.log(arr);\r\n\r\n      // // inset 재조정\r\n      // bst.resize_div(arr);\r\n\r\n      // // 배열 갱신\r\n      // setArr([...arr]);\r\n    }    \r\n  };\r\n\r\n  const onDrag_Over_shadow_event = (e) => {\r\n  e.dataTransfer.dropEffect = \"move\";\r\n  e.preventDefault();\r\n}  \r\n</script>\r\n\r\n\r\n<!-- HTML -->\r\n<div id=\"div_tree\">Tree Area\r\n  <OntuneTreeView />\r\n  \r\n</div>\r\n\r\n<div id=\"main_Col\" draggable=\"true\" on:mousedown={onMouseDown_Main_bar_event}></div>\r\n\r\n<div id=\"div_mosaic\">\r\n  <div id=\"div_mosaic_menubar\">Jennifer Area\r\n<!-- \t\t\t\r\n    <button onclick=\"change_arr(event)\" name=\"P1\">P1</button>\r\n    <button onclick=\"change_arr(event)\" name=\"P2\">P2</button>\r\n    <button onclick=\"change_arr(event)\" name=\"P3\">P3</button>\r\n    <button onclick=\"change_arr(event)\" name=\"P4\">P4</button>\r\n    <button onclick=\"change_arr(event)\" name=\"P5\">P5</button>\r\n\r\n    <button onclick=\"save_arr(event)\" name=\"Save\" style=\"width: 100px\">Save</button> \r\n-->\r\n  </div>\r\n\r\n  <div id=\"div_mosaic_main\">\r\n    <div id=\"div_mosaic_body\">\r\n      <div id=\"shadow\" class=\"div_Shadow\" draggable=\"true\" on:dragover={onDrag_Over_shadow_event}></div>\r\n      <!-- <div id=\"div_mosaic_body\">Mosaic Area</div> -->\r\n      <Mosaic {...mosaic_props} />\r\n    </div>    \r\n  </div>\r\n\r\n  <div id=\"div_grid_main\">\r\n    <!-- <div id=\"main_Row\" draggable=\"true\" onmousedown=\"onMouseDown_Main_bar_event(event)\"></div> -->\r\n    <div id=\"div_grid_body\">Grid Area</div>\r\n  </div>  \r\n</div>\t\r\n\r\n\r\n<style>\r\n\r\n</style>","import App from './App.svelte';\r\n\r\nconst app = new App({\r\n\ttarget: document.body\r\n});\r\n\r\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","m","new_on_destroy","on_mount","map","filter","on_destroy","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","Node","constructor","id","div_type","node_type","node_text","inset_top","inset_right","inset_bottom","inset_left","ratio","p_id","left","right","Binary_Tree","parent_node","new_id","text_idx","console","log","old_node","left_node","right_node","calc_width","calc_height","change","change_node","display_type","bLeft","remove","grand_node","del_node","copy_inset","tmp_source","tmp_dst","resize_div","tmp_arr","tmp_node","tmp_left","tmp_right","tmp_width","tmp_height","PercentToLength","aDefd_Length","aPer_1","aPer_2","PercentToPx","aDef_Length","ainset","Position_Check","aClientX","aPoint","aLength","t7_value","div0","div0_id_value","button0","button0_id_value","div1","div3","div3_name_value","div3_style_value","button1","div2","t7","create_if_block_5","create_if_block_4","create_if_block_3","if_block3","create_if_block_2","if_block4","create_if_block_1","div","div_id_value","div_name_value","t4","t4_value","t0_value","create_if_block","create_if_block_6","t0","iterations","bst","idx","node_text_idx","arr","drag_node","drag_state","drag_bleft","drop_id","Del_Div","e","$$invalidate","insert_result","bar","onMouseDragstart_bar_event","onMouseDrag_bar_event","preventDefault","x","y","tmp_p","parseInt","tmp_l","tmp_r","tmp_tree","getElementById","offsetWidth","tmp_title","offsetHeight","parentElement","clientX","clientY","onMouseDragend_bar_event","tmp_p_node","tmp_c_node","tmp_c2_node","tmp_el","getElementsByName","inset","display","zIndex","opacity","dataTransfer","dropEffect","shadow_div","point_x","point_y","tmp_width_length","tmp_height_length","tmp_position","aResult_X","aResult_Y","Position_Fix","change_result","item","li","span","label","ul","counter","rootContent","defaultClosed","inputId","lineColor","iconBackgroundColor","iconColor","branchHoverColor","button","div8","div5","div4","div7","onMouseDown_Main_bar_event","levels","updates","to_null_out","accounted_for","n","spread_props","main_bar","onMouseDragstart_Main_bar_event","onMouseDrag_Main_bar_event","tmp_ratio","tmp_A","tmp_B","tmp_C","tmp_D","window","innerWidth","innerHeight","width","height","onMouseDragend_Main_bar_event","mosaic_props","body"],"mappings":"gCAAA,SAASA,IAAU,CAEnB,SAASC,EAAOC,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,CACX,CASA,SAASG,EAAIC,GACT,OAAOA,GACX,CACA,SAASC,IACL,OAAOC,OAAOC,OAAO,KACzB,CACA,SAASC,EAAQC,GACbA,EAAIC,QAAQP,EAChB,CACA,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,CAClB,CACA,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,CAChF,CAmCA,SAASE,EAAYC,EAAYC,EAAKC,EAASf,GAC3C,GAAIa,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAASf,GAC5D,OAAOa,EAAW,GAAGG,EACxB,CACL,CACA,SAASC,EAAiBJ,EAAYC,EAAKC,EAASf,GAChD,OAAOa,EAAW,IAAMb,EAClBL,EAAOoB,EAAQD,IAAII,QAASL,EAAW,GAAGb,EAAGc,KAC7CC,EAAQD,GAClB,CACA,SAASK,EAAiBN,EAAYE,EAASK,EAAOpB,GAClD,GAAIa,EAAW,IAAMb,EAAI,CACrB,MAAMqB,EAAOR,EAAW,GAAGb,EAAGoB,IAC9B,QAAsBE,IAAlBP,EAAQK,MACR,OAAOC,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIX,EAAQK,MAAMO,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKb,EAAQK,MAAMQ,GAAKP,EAAKO,GAExC,OAAOL,CACV,CACD,OAAOR,EAAQK,MAAQC,CAC1B,CACD,OAAON,EAAQK,KACnB,CACA,SAASS,EAAiBC,EAAMC,EAAiBjB,EAAKC,EAASiB,EAAcC,GACzE,GAAID,EAAc,CACd,MAAME,EAAejB,EAAiBc,EAAiBjB,EAAKC,EAASkB,GACrEH,EAAKK,EAAED,EAAcF,EACxB,CACL,CAKA,SAASI,EAAyBrB,GAC9B,GAAIA,EAAQD,IAAIa,OAAS,GAAI,CACzB,MAAMP,EAAQ,GACRO,EAASZ,EAAQD,IAAIa,OAAS,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,EAAMQ,IAAM,EAEhB,OAAOR,CACV,CACD,OAAQ,CACZ,CAiMA,SAASiB,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,EACvB,CAoDA,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,KACxC,CASA,SAASE,EAAOL,GACRA,EAAKM,YACLN,EAAKM,WAAWC,YAAYP,EAEpC,CAOA,SAASQ,EAAQC,GACb,OAAOC,SAASC,cAAcF,EAClC,CAmBA,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,EACnC,CACA,SAASE,IACL,OAAOH,EAAK,IAChB,CACA,SAASI,IACL,OAAOJ,EAAK,GAChB,CACA,SAASK,EAAOjB,EAAMkB,EAAOC,EAASC,GAElC,OADApB,EAAKqB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMpB,EAAKsB,oBAAoBJ,EAAOC,EAASC,EAC1D,CA6BA,SAASG,EAAKvB,EAAMwB,EAAWC,GACd,MAATA,EACAzB,EAAK0B,gBAAgBF,GAChBxB,EAAK2B,aAAaH,KAAeC,GACtCzB,EAAK4B,aAAaJ,EAAWC,EACrC,CAyLA,SAASI,EAASjB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKkB,YAAcjB,IACnBD,EAAKC,KAAOA,EACpB,CACA,SAASkB,EAAgBC,EAAOP,GAC5BO,EAAMP,MAAiB,MAATA,EAAgB,GAAKA,CACvC,CASA,SAASQ,EAAUjC,EAAMkC,EAAKT,EAAOU,GACnB,OAAVV,EACAzB,EAAKoC,MAAMC,eAAeH,GAG1BlC,EAAKoC,MAAME,YAAYJ,EAAKT,EAAOU,EAAY,YAAc,GAErE,CA+TA,IAAII,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,CACxB,CA+HA,MAAMC,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoBzF,GACzBmF,EAAiBO,KAAK1F,EAC1B,CAsBA,MAAM2F,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBjB,EACxB,EAAG,CAGC,KAAOe,EAAWZ,EAAiBtD,QAAQ,CACvC,MAAMqD,EAAYC,EAAiBY,GACnCA,IACAd,EAAsBC,GACtBgB,EAAOhB,EAAUiB,GACpB,CAID,IAHAlB,EAAsB,MACtBE,EAAiBtD,OAAS,EAC1BkE,EAAW,EACJX,EAAkBvD,QACrBuD,EAAkBgB,KAAlBhB,GAIJ,IAAK,IAAItD,EAAI,EAAGA,EAAIuD,EAAiBxD,OAAQC,GAAK,EAAG,CACjD,MAAMuE,EAAWhB,EAAiBvD,GAC7B+D,EAAeS,IAAID,KAEpBR,EAAeU,IAAIF,GACnBA,IAEP,CACDhB,EAAiBxD,OAAS,CAClC,OAAasD,EAAiBtD,QAC1B,KAAOyD,EAAgBzD,QACnByD,EAAgBc,KAAhBd,GAEJI,GAAmB,EACnBG,EAAeW,QACfvB,EAAsBgB,EAC1B,CACA,SAASC,EAAOC,GACZ,GAAoB,OAAhBA,EAAGM,SAAmB,CACtBN,EAAGD,SACH5F,EAAQ6F,EAAGO,eACX,MAAMpF,EAAQ6E,EAAG7E,MACjB6E,EAAG7E,MAAQ,EAAE,GACb6E,EAAGM,UAAYN,EAAGM,SAASpE,EAAE8D,EAAGnF,IAAKM,GACrC6E,EAAGQ,aAAanG,QAAQmF,EAC3B,CACL,CAeA,MAAMiB,EAAW,IAAId,IAerB,SAASe,EAAcC,EAAOC,GACtBD,GAASA,EAAMhF,IACf8E,EAASI,OAAOF,GAChBA,EAAMhF,EAAEiF,GAEhB,CACA,SAASE,EAAeH,EAAOC,EAAOjE,EAAQuD,GAC1C,GAAIS,GAASA,EAAMI,EAAG,CAClB,GAAIN,EAASN,IAAIQ,GACb,OACJF,EAASL,IAAIO,GAxBjBK,UAyBWC,EAAExB,MAAK,KACVgB,EAASI,OAAOF,GACZT,IACIvD,GACAgE,EAAMO,EAAE,GACZhB,IACH,IAELS,EAAMI,EAAEH,EACX,MACQV,GACLA,GAER,CAqqBA,SAASiB,EAAiBR,GACtBA,GAASA,EAAMM,GACnB,CAIA,SAASG,EAAgBrC,EAAW1C,EAAQI,EAAQ4E,GAChD,MAAMf,SAAEA,EAAQE,aAAEA,GAAiBzB,EAAUiB,GAC7CM,GAAYA,EAASgB,EAAEjF,EAAQI,GAC1B4E,GAED7B,GAAoB,KAChB,MAAM+B,EAAiBxC,EAAUiB,GAAGwB,SAASC,IAAI3H,GAAK4H,OAAOpH,GAIzDyE,EAAUiB,GAAG2B,WACb5C,EAAUiB,GAAG2B,WAAWlC,QAAQ8B,GAKhCpH,EAAQoH,GAEZxC,EAAUiB,GAAGwB,SAAW,EAAE,IAGlChB,EAAanG,QAAQmF,EACzB,CACA,SAASoC,EAAkB7C,EAAW8C,GAClC,MAAM7B,EAAKjB,EAAUiB,GACD,OAAhBA,EAAGM,WACHnG,EAAQ6F,EAAG2B,YACX3B,EAAGM,UAAYN,EAAGM,SAASY,EAAEW,GAG7B7B,EAAG2B,WAAa3B,EAAGM,SAAW,KAC9BN,EAAGnF,IAAM,GAEjB,CACA,SAASiH,EAAW/C,EAAWpD,IACI,IAA3BoD,EAAUiB,GAAG7E,MAAM,KACnB6D,EAAiBS,KAAKV,GAr1BrBQ,IACDA,GAAmB,EACnBH,EAAiB2C,KAAKlC,IAq1BtBd,EAAUiB,GAAG7E,MAAM6G,KAAK,IAE5BjD,EAAUiB,GAAG7E,MAAOQ,EAAI,GAAM,IAAO,GAAMA,EAAI,EACnD,CACA,SAASsG,EAAKlD,EAAWrB,EAASwE,EAAUC,EAAiBC,EAAWC,EAAOC,EAAenH,EAAQ,EAAE,IACpG,MAAMoH,EAAmB1D,EACzBC,EAAsBC,GACtB,MAAMiB,EAAKjB,EAAUiB,GAAK,CACtBM,SAAU,KACVzF,IAAK,GAELwH,QACAtC,OAAQtG,EACR2I,YACAI,MAAOxI,IAEPwH,SAAU,GACVG,WAAY,GACZc,cAAe,GACflC,cAAe,GACfC,aAAc,GACdkC,QAAS,IAAIC,IAAIjF,EAAQgF,UAAYH,EAAmBA,EAAiBvC,GAAG0C,QAAU,KAEtFE,UAAW5I,IACXmB,QACA0H,YAAY,EACZC,KAAMpF,EAAQrB,QAAUkG,EAAiBvC,GAAG8C,MAEhDR,GAAiBA,EAActC,EAAG8C,MAClC,IAAIC,GAAQ,EAkBZ,GAjBA/C,EAAGnF,IAAMqH,EACHA,EAASnD,EAAWrB,EAAQ2E,OAAS,CAAE,GAAE,CAAC1G,EAAGqH,KAAQC,KACnD,MAAMlF,EAAQkF,EAAKvH,OAASuH,EAAK,GAAKD,EAOtC,OANIhD,EAAGnF,KAAOuH,EAAUpC,EAAGnF,IAAIc,GAAIqE,EAAGnF,IAAIc,GAAKoC,MACtCiC,EAAG6C,YAAc7C,EAAGwC,MAAM7G,IAC3BqE,EAAGwC,MAAM7G,GAAGoC,GACZgF,GACAjB,EAAW/C,EAAWpD,IAEvBqH,CAAG,IAEZ,GACNhD,EAAGD,SACHgD,GAAQ,EACR5I,EAAQ6F,EAAGO,eAEXP,EAAGM,WAAW6B,GAAkBA,EAAgBnC,EAAGnF,KAC/C6C,EAAQrB,OAAQ,CAChB,GAAIqB,EAAQwF,QAAS,CAEjB,MAAMC,EAl+ClB,SAAkBrG,GACd,OAAOsG,MAAMC,KAAKvG,EAAQwG,WAC9B,CAg+C0BC,CAAS7F,EAAQrB,QAE/B2D,EAAGM,UAAYN,EAAGM,SAASkD,EAAEL,GAC7BA,EAAM9I,QAAQsC,EACjB,MAGGqD,EAAGM,UAAYN,EAAGM,SAASW,IAE3BvD,EAAQ+F,OACR/C,EAAc3B,EAAUiB,GAAGM,UAC/Bc,EAAgBrC,EAAWrB,EAAQrB,OAAQqB,EAAQjB,OAAQiB,EAAQ2D,eAEnExB,GACH,CACDf,EAAsByD,EAC1B,CAoDA,MAAMmB,EACFC,WACI/B,EAAkBgC,KAAM,GACxBA,KAAKD,SAAWlK,CACnB,CACDoK,IAAIC,EAAM5D,GACN,IAAK5F,EAAY4F,GACb,OAAOzG,EAEX,MAAMmJ,EAAagB,KAAK5D,GAAG4C,UAAUkB,KAAUF,KAAK5D,GAAG4C,UAAUkB,GAAQ,IAEzE,OADAlB,EAAUnD,KAAKS,GACR,KACH,MAAM6D,EAAQnB,EAAUoB,QAAQ9D,IACjB,IAAX6D,GACAnB,EAAUqB,OAAOF,EAAO,EAAE,CAErC,CACDG,KAAKC,GA/gET,IAAkBC,EAghENR,KAAKS,QAhhECD,EAghEkBD,EA/gEG,IAA5BlK,OAAOqK,KAAKF,GAAK1I,UAghEhBkI,KAAK5D,GAAG6C,YAAa,EACrBe,KAAKS,MAAMF,GACXP,KAAK5D,GAAG6C,YAAa,EAE5B,EC9jEI,MAAM0B,EACbC,YACEC,EACAC,EAAW,IACXC,EAAY,IACZC,EAAY,GACZC,EAAY,EACZC,EAAc,EACdC,EAAe,EACfC,EAAa,EACbC,EAAQ,GAERC,EAAO,KACPC,EAAO,KACPC,EAAQ,MAERxB,KAAKa,GAAKA,EACVb,KAAKc,SAAWA,EAChBd,KAAKe,UAAYA,EACjBf,KAAKgB,UAAYA,EAEjBhB,KAAKiB,UAAYA,EACjBjB,KAAKkB,YAAcA,EACnBlB,KAAKmB,aAAeA,EACpBnB,KAAKoB,WAAaA,EAClBpB,KAAKqB,MAAQA,EAEbrB,KAAKsB,KAAOA,EACZtB,KAAKuB,KAAOA,EACZvB,KAAKwB,MAAQA,CACd,EA2BI,MAAMC,EACXb,cACEZ,KAAKd,KAAO,IACb,CAMDtG,OAAO8I,EAAaC,EAAQC,GAC1BC,QAAQC,IAAI,oCAIZ,MAAMC,EAAaL,EACbM,EAAa,IAAIrB,EAAKgB,EAAY,IAAK,IAAcI,EAASf,UAAWe,EAASd,UAAWc,EAASb,YAAaa,EAASZ,aAAcY,EAASX,WAAY,GAAIW,EAASlB,IAC5KoB,EAAa,IAAItB,EAAKgB,EAAS,EAAG,IAAK,IAAK,YAAcC,EAAW,GAAIG,EAASd,UAAWc,EAASb,YAAaa,EAASZ,aAAcY,EAASX,WAAY,GAAIW,EAASlB,IAMlL,GAAIkB,EAAU,CAEZ,IAAIG,GAAe,KAAOH,EAASX,WAAaW,EAASb,cAAiB,EAGtEiB,GAAe,KAAOJ,EAASd,UAAac,EAASZ,eAAiB,EAmC1E,OAhCIe,GAAcC,GAEhBJ,EAASjB,SAAW,IAGpBkB,EAAUd,YAAca,EAASb,YAAcgB,EAC/CD,EAAWb,WAAaW,EAASX,WAAcc,IAG/CH,EAASjB,SAAW,IAGpBkB,EAAUb,aAAeY,EAASZ,aAAegB,EACjDF,EAAWhB,UAAcc,EAASd,UAAekB,GAInDJ,EAAShB,UAAY,IACrBgB,EAASf,UAAY,GAWrBe,EAASR,KAAQS,EACjBD,EAASP,MAAQS,EAEV,CAACD,EAAWC,EACpB,CACD,OAAO,IAER,CAEDG,OAAOV,EAAaC,EAAQU,EAAaC,EAAcC,GACrDV,QAAQC,IAAI,oCAIZ,MAAMC,EAAaL,EACbM,EAAa,IAAIrB,EAAKgB,EAAY,IAAK,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAII,EAASlB,IACzEoB,EAAa,IAAItB,EAAKgB,EAAS,EAAG,IAAK,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAII,EAASlB,IAW/E,OATc,IAAV0B,GACFP,EAAUhB,UAAaqB,EAAYrB,UACnCiB,EAAWjB,UAAYe,EAASf,YAEhCgB,EAAUhB,UAAae,EAASf,UAChCiB,EAAWjB,UAAYqB,EAAYrB,WAIjCe,GAGAA,EAASjB,SADW,MAAjBwB,GAA2C,MAAjBA,EACR,IAEA,IAEvBP,EAAShB,UAAY,IACrBgB,EAASf,UAAY,GAGrBe,EAASR,KAAQS,EACjBD,EAASP,MAAQS,EAEV,CAACD,EAAWC,IAEd,IACR,CAMDO,OAAOC,EAAYf,EAAagB,GAgF9B,OA/EAb,QAAQC,IAAI,oCAERW,EAIEf,EAAYH,KAAKV,KAAO6B,EAAS7B,IACnCa,EAAYF,MAAMF,KAAOmB,EAAW5B,GAGpCb,KAAK2C,WAAWjB,EAAaA,EAAYF,OACzCE,EAAYF,MAAMH,MAAQK,EAAYL,MAKlCoB,EAAWlB,KAAKV,KAAOa,EAAYb,GACrC4B,EAAWlB,KAAOG,EAAYF,MAE9BiB,EAAWjB,MAAQE,EAAYF,QAGjCE,EAAYH,KAAKD,KAAOmB,EAAW5B,GAGnCb,KAAK2C,WAAWjB,EAAaA,EAAYH,MACzCG,EAAYH,KAAKF,MAAQK,EAAYL,MAKjCoB,EAAWlB,KAAKV,KAAOa,EAAYb,GACrC4B,EAAWlB,KAAOG,EAAYH,KAE9BkB,EAAWjB,MAAQE,EAAYH,MAK/BG,EAAYH,KAAKV,KAAO6B,EAAS7B,IACnCa,EAAYF,MAAMF,KAAO,KAGzBtB,KAAK2C,WAAWjB,EAAaA,EAAYF,OACzCE,EAAYF,MAAMH,MAAQK,EAAYL,QAItCK,EAAYH,KAAKD,KAAO,KAGxBtB,KAAK2C,WAAWjB,EAAaA,EAAYH,MACzCG,EAAYH,KAAKF,MAAQK,EAAYL,OAkBzCqB,EAAS3B,UAAY,IAIrBW,EAAYX,UAAY,IAExBW,EAAYH,KAAQ,KACpBG,EAAYF,MAAQ,MAEb,CACR,CAEDmB,WAAWC,EAAYC,GACrBA,EAAQ5B,UAAe2B,EAAW3B,UAClC4B,EAAQ3B,YAAe0B,EAAW1B,YAClC2B,EAAQ1B,aAAeyB,EAAWzB,aAClC0B,EAAQzB,WAAewB,EAAWxB,UACnC,CAED0B,WAAWC,GACTA,EAAQtM,SAAQuM,IAEd,GAA2B,MAAvBA,EAASjC,UAAmB,CAC9B,IAAIkC,EAAYD,EAASzB,KACrB2B,EAAYF,EAASxB,MAOzB,GAJAxB,KAAK2C,WAAWK,EAAUC,GAC1BjD,KAAK2C,WAAWK,EAAUE,GAGA,MAAtBF,EAASlC,SAAkB,CAE7B,IAAIqC,EAAa,KAAOH,EAAS5B,WAAa4B,EAAS9B,aAEvD+B,EAAS/B,YAAc+B,EAAS/B,YAAeiC,IAAc,IAAMF,EAAS5B,OAAU,KACtF6B,EAAU9B,WAAa8B,EAAU9B,WAAc+B,IAAc,IAAMD,EAAU7B,OAAS,IAChG,KAAe,CAEL,IAAI+B,EAAc,KAAOJ,EAAS/B,UAAY+B,EAAS7B,cAEvD8B,EAAS9B,aAAe8B,EAAS9B,aAAgBiC,IAAe,IAAMH,EAAS5B,OAAU,KACzF6B,EAAUjC,UAAciC,EAAUjC,UAAemC,IAAe,IAAMF,EAAU7B,OAAS,IAC1F,CACF,IAGJ,EC7RI,SAASgC,EAAgBC,EAAcC,EAAQC,GAMpD,OAAQF,IAAiB,KAAOC,EAASC,IAAW,IACtD,CAEO,SAASC,EAAYC,EAAaC,GAGvC,OAAQD,GAAeC,EAAS,IAClC,CAEO,SAASC,EAAeC,EAAUC,EAAQC,GAE/C,OAAaF,EAAWC,GAAWC,EAE1B,EACIF,EAAWC,EAAUC,GAAcF,EAAWC,GAAsB,EAAVC,EAE9D,EAGA,CAEX,uHCifGlC,QAAQC,IAAI,WAAS,GAaEkC,EAAA/M,MAAK+J,UAAS,qHAHI,2HARP,QAAQ/J,EAAI,IAAC4J,IAAQ5G,EAAAgK,EAAA,KAAAC,EAAAjN,MAAK4J,gBACrD,aAOyB5G,EAAAkK,EAAA,KAAAC,EAAAnN,MAAK4J,6BADP5G,EAAAoK,EAAA,QAAA,yEAHDpK,EAAAqK,EAAA,OAAAC,EAAAtN,MAAK4J,IAC3B5G,EAAAqK,EAAA,QAAAE,EAAe,UAAAvN,EAAK,IAAAgK,cAAchK,EAAI,IAACiK,gBAAgBjK,EAAK,IAAAkK,iBAAiBlK,MAAKmK,yCAN1FxI,EAGMH,EAAAwL,EAAApL,YACND,EASMH,EAAA6L,EAAAzL,GALLL,EAGM8L,EAAAD,GAFL7L,EAAmD6L,EAAAF,iBACnD3L,EAAkD6L,EAAAI,UAEnDjM,EAA4C8L,EAAAI,uCAXiCzN,EAAoB,kBAAcA,EAAmB,oBAAgBA,EAAqB,gBAQpJA,EAAO,kCAJyBA,EAAoB,kBAAcA,EAAmB,oBAAgBA,EAAqB,mCAJ3G,QAAQA,EAAI,IAAC4J,mBAAQ,EAAAtJ,GAAA2M,KAAAA,EAAAjN,MAAK4J,iBAQ5B,EAAAtJ,GAAA6M,KAAAA,EAAAnN,MAAK4J,iBAGd,EAAAtJ,GAAAyM,KAAAA,EAAA/M,MAAK+J,UAAS,KAAAzG,EAAAoK,EAAAX,GAPR,EAAAzM,GAAAgN,KAAAA,EAAAtN,MAAK4J,mBAC3B,EAAAtJ,GAAAiN,KAAAA,EAAe,UAAAvN,EAAK,IAAAgK,cAAchK,EAAI,IAACiK,gBAAgBjK,EAAK,IAAAkK,iBAAiBlK,MAAKmK,uHApDxE,MAAbnK,EAAI,IAACqK,MAAYsD,GAAA3N,KAMC,MAAlBA,EAAI,IAAC6J,UAAgB+D,GAAA5N,KAMH,MAAlBA,EAAI,IAAC6J,UAAgBgE,GAAA7N,GAQrB8N,EAAwB,MAAxB9N,EAAK,IAAAsK,KAAKR,WAAiBiE,GAAA/N,GAY3BgO,EAAyB,MAAzBhO,EAAK,IAAAuK,MAAMT,WAAiBmE,GAAAjO,kNAhCf,MAAbA,EAAI,IAACqK,uEAMa,MAAlBrK,EAAI,IAAC6J,2EAMa,MAAlB7J,EAAI,IAAC6J,2EAQmB,MAAxB7J,EAAK,IAAAsK,KAAKR,4EAYe,MAAzB9J,EAAK,IAAAuK,MAAMT,iRA9BoB,QAAQ9J,EAAI,IAAC4J,IAAQ5G,EAAAkL,EAAA,KAAAC,EAAAnO,MAAK4J,8BAD7DjI,EAGMH,EAAA0M,EAAAtM,yBAFwE5B,EAAoB,kBAAcA,EAAmB,oBAAgBA,EAAqB,+BAArI,QAAQA,EAAI,IAAC4J,mBAAQ,EAAAtJ,GAAA6N,KAAAA,EAAAnO,MAAK4J,qHAMtC5G,EAAAkL,EAAA,OAAAE,EAAApO,MAAK4J,0CACX,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,uBAFlHxI,EAGMH,EAAA0M,EAAAtM,yBAFyD5B,EAAqB,kBAA7D,EAAAM,GAAA8N,KAAAA,EAAApO,MAAK4J,+BACX,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,kIAK3FnH,EAAAkL,EAAA,OAAAE,EAAApO,MAAK4J,0CACX,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,uBAFlHxI,EAGMH,EAAA0M,EAAAtM,yBAFyD5B,EAAqB,kBAA7D,EAAAM,GAAA8N,KAAAA,EAAApO,MAAK4J,+BACX,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,yGAc1FnK,EAAI,IAACsK,KAAKP,UAAS,uFAHI,gFAAd/J,EAAI,IAACsK,KAAKV,wHAJb5J,EAAI,IAACsK,KAAKV,kBACvB,UAAM5J,EAAK,IAAAsK,KAAKN,cAAchK,EAAI,IAACsK,KAAKL,gBAAgBjK,EAAK,IAAAsK,KAAKJ,iBAAiBlK,EAAI,IAACsK,KAAKH,uBAF9GxI,EASMH,EAAAiM,EAAA7L,GALLL,EAGMkM,EAAAT,GAFLzL,EAAwDyL,EAAAE,iBACxD3L,EAAuDyL,EAAAQ,UAExDjM,EAAiDkM,EAAAL,6BAH9BpN,EAAO,mCAD4BA,EAAqB,mBAHnBA,EAAoB,kBAAcA,EAAmB,oBAAgBA,EAAqB,mCAIlHA,EAAI,IAACsK,KAAKV,6BAGnB5J,EAAI,IAACsK,KAAKP,UAAS,KAAAzG,EAAA+K,EAAAC,eAPbtO,EAAI,IAACsK,KAAKV,+BACvB,UAAM5J,EAAK,IAAAsK,KAAKN,cAAchK,EAAI,IAACsK,KAAKL,gBAAgBjK,EAAK,IAAAsK,KAAKJ,iBAAiBlK,EAAI,IAACsK,KAAKH,4GAkBtFnK,EAAI,IAACuK,MAAMR,UAAS,uFAHI,sFAAf/J,EAAI,IAACuK,MAAMX,wHAJf5J,EAAI,IAACuK,MAAMX,kBACxB,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,uBAFjHxI,EASMH,EAAAiM,EAAA7L,GALLL,EAGMkM,EAAAT,GAFLzL,EAAyDyL,EAAAE,iBACzD3L,EAAwDyL,EAAAQ,UAEzDjM,EAAkDkM,EAAAL,oCAH/BpN,EAAO,mCAD4BA,EAAqB,mBAHnBA,EAAoB,kBAAcA,EAAmB,oBAAgBA,EAAqB,mCAIlHA,EAAI,IAACuK,MAAMX,6BAGpB5J,EAAI,IAACuK,MAAMR,UAAS,KAAAzG,EAAA+K,EAAAC,eAPftO,EAAI,IAACuK,MAAMX,+BACxB,UAAM5J,EAAK,IAAAuK,MAAMP,cAAchK,EAAI,IAACuK,MAAMN,gBAAgBjK,EAAK,IAAAuK,MAAML,iBAAiBlK,EAAI,IAACuK,MAAMJ,wEAzClH,UAAAoE,EAAA3D,QAAQC,IAAI7K,MAAK8J,WAAS,yBAIJ,KAAlB9J,EAAI,IAAC8J,UAAgB0E,EA8CG,MAAlBxO,EAAK,IAAA6J,UAAuC,MAAnB7J,EAAI,IAAC8J,WAAkC,MAAb9J,EAAK,IAAAqK,KAAYoE,OAApE,qHAlDV,EAAAnO,GAAAiO,KAAAA,EAAA3D,QAAQC,IAAI7K,MAAK8J,WAAS,KAAAxG,EAAAoL,EAAAH,sJAF3B3D,QAAQC,IAAI,UAAQ,KACd7K,EAAG,wBAARa,OAAIC,GAAA,kMAACd,EAAG,WAARa,OAAIC,GAAA,EAAA,0HAAJD,sCH/FF,SAAsB8N,EAAY3H,GAC9B,IAAK,IAAIlG,EAAI,EAAGA,EAAI6N,EAAW9N,OAAQC,GAAK,EACpC6N,EAAW7N,IACX6N,EAAW7N,GAAGuF,EAAEW,EAE5B,4CGvXY4H,GAAGtF,OACHuF,GAAGvF,iBACHwF,GAAaxF,OACbyF,GAAGzF,EAEV0F,EAAY,KACZC,EAAa,IACbC,GAAa,EACbC,GAAc,EAKb,MAuBEC,EAAWC,IACX,GAAmB,OAAnBN,EAAIM,EAAEzF,IAAIS,YACL,EAGTO,QAAQC,IAAI,gCAGRkE,EAAIA,EAAIA,EAAIM,EAAEzF,IAAIS,MAAMA,MAC1BuE,EAAIrD,OAAOwD,EAAIA,EAAIA,EAAIM,EAAEzF,IAAIS,MAAMA,MAAO0E,EAAIA,EAAIM,EAAEzF,IAAIS,MAAO0E,EAAIM,EAAEzF,KAErEgF,EAAIrD,OAAO,KAAMwD,EAAIA,EAAIM,EAAEzF,IAAIS,MAAO0E,EAAIM,EAAEzF,KAI9CgF,EAAI/C,WAAWkD,GAKjBO,EAAA,EAAAP,MAAUA,IACRnE,QAAQC,IAAIkE,EAAG,EA+XF,MAAZH,EAAI3G,OACP2C,QAAQC,IAAI,iCACV+D,EAAI3G,KAAI,IAAOyB,EAAKmF,EAAK,IAAK,IAAK,YAAcC,EAAgB,GAAI,EAAG,EAAG,EAAG,EAAG,KACjFC,EAAG,CAAIH,EAAI3G,MAGX6G,GAAgC,EAEhClE,QAAQC,IAAIkE,GACdnE,QAAQC,IAAI,0KApbGwE,IAEbzE,QAAQC,IAAI,gCAGN,MAAA0E,EAAgBX,EAAIjN,OAAOoN,EAAIM,EAAE7N,OAAOoI,IAAKmF,EAAIlO,OAAQiO,GAE3DS,QAGFV,GAAY,QACZC,GAAgC,OAGnCC,EAAG,IAAOA,EAAKQ,EAAc,GAAIA,EAAc,MAK9C3E,QAAQC,IAAIkE,EAAG,IA+BYM,IAC3BL,EAAY,KAEZpE,QAAQC,IAAI,6CAIN2E,EAAMH,EAAE7N,OAQL,SAAAiO,EAA2B9M,GAClCiI,QAAQC,IAAI,yCAQL,SAAA6E,EAAsB/M,MAC7BiI,QAAQC,IAAI,uCAGZlI,EAAMgN,iBAMFhN,EAAMiN,EAAI,GAAKjN,EAAMkN,EAAI,EAAC,KAExBC,EAAQf,EAAIgB,SAASV,EAAE7N,OAAO4B,aAAa,UAC3C4M,EAAQF,EAAMxF,KACd2F,EAAQH,EAAMvF,MAEd2F,EAAa/N,SAASgO,eAAe,YAAYC,YACjDC,EAAalO,SAASgO,eAAe,sBAAsBG,aAC3DpE,EAAamD,EAAE7N,OAAO+O,cAAcH,YACpCjE,EAAakD,EAAE7N,OAAO+O,cAAcD,aAMjB,MAAnBR,EAAMjG,SAERmG,EAAM5F,OAAWzH,EAAM6N,QAAUN,EAAcJ,EAAM3F,YAAe+B,EAAc,MAAUE,EAAgBF,EAAY4D,EAAM3F,WAAY2F,EAAM7F,aAAkB,IAIlK+F,EAAM5F,OAAWzH,EAAM8N,QAAUJ,EAAcP,EAAM9F,WAAemC,EAAc,MAAUC,EAAgBD,EAAY2D,EAAM9F,UAAY8F,EAAM5F,cAAkB,IAEhK8F,EAAM5F,MAAQ,GAChB4F,EAAM5F,MAAQ,GACL4F,EAAM5F,MAAQ,KACvB4F,EAAM5F,MAAQ,IAEhB6F,EAAM7F,MAAQ,IAAM4F,EAAM5F,MAG1BwE,EAAI/C,WAAWkD,GAInBO,EAAA,EAAAP,MAAUA,KA7DVS,EAAI1M,iBAAiB,YAAa2M,GAClCD,EAAI1M,iBAAiB,OAAa4M,GAClCF,EAAI1M,iBAAiB,oBAkEZ4N,IACP9F,QAAQC,IAAI,qCAEZ2E,EAAIzM,oBAAoB,YAAa0M,GACrCD,EAAIzM,oBAAoB,OAAa2M,GACrCF,EAAIzM,oBAAoB,UAAa2N,GAKrC9F,QAAQC,IAAIkE,OAmBaM,IAC3BzE,QAAQC,IAAI,6CAOZmE,EAAaD,EAAIgB,SAASV,EAAE7N,OAAO+O,cAAcnN,aAAa,UAC9D6L,EAAa,IACbC,GAAa,EACbC,EAAaY,SAASV,EAAE7N,OAAO+O,cAAcnN,aAAa,SAGtD,IAAAuN,EAAc,KACdC,EAAc,KACdC,EAAc,KACdC,EAAc,KAEK,OAAnB9B,EAAU3E,OACZsG,EAAa5B,EAAIC,EAAU3E,MAGvBsG,EAAWrG,KAAKV,KAAOoF,EAAUpF,IACnCgH,EAAcD,EAAWpG,MACzBsG,EAAcF,EAAWrG,OAEzBsG,EAAcD,EAAWrG,KACzBuG,EAAcF,EAAWpG,OAI3BqE,EAAIlD,WAAWiF,EAAYC,GAC3BA,EAAWxG,MAAS,IACpByG,EAAYzG,MAAQ,EAIpB0G,EAAS3O,SAAS4O,kBAAkBH,EAAWhH,IAC/CkH,EAAO,GAAGjN,MAAMmN,MAAK,GAAML,EAAW3G,cAAc2G,EAAW1G,gBAAgB0G,EAAWzG,iBAAiByG,EAAWxG,cAGtH2G,EAAS3O,SAAS4O,kBAAkBJ,EAAW/G,IAC/CkH,EAAO,GAAGjN,MAAMoN,QAAU,OAG1BH,EAAS3O,SAAS4O,kBAAkB/B,EAAUpF,IAC9CkH,EAAO,GAAGjN,MAAMqN,OAAS,EAEzBJ,EAAO,GAAGjN,MAAMsN,QAAU,IAIC9B,IACzB,GAAc,OAAdL,SACK,EAOJ,GAJLpE,QAAQC,IAAI,yCAIM,IAAbsE,GAAoBA,IAAYH,EAAUpF,GAAE,CAClCzH,SAAS4O,kBAAkB/B,EAAUpF,IAC3C,GAAG/F,MAAMqN,OAAS,EAI3BnC,EAAIvP,SAAQuM,OAKmB,MAAvBA,EAASjC,UAAiB,KACxBkC,EAAYD,EAASzB,KACrB2B,EAAYF,EAASxB,SAGzBqE,EAAIlD,WAAWK,EAAUC,GACzB4C,EAAIlD,WAAWK,EAAUE,GAGC,MAAtBF,EAASlC,SAAgB,KAEvBqC,EAAa,KAAOH,EAAS5B,WAAa4B,EAAS9B,aAEvD+B,EAAS/B,YAAc+B,EAAS/B,YAAeiC,IAAc,IAAMF,EAAS5B,OAAU,KACtF6B,EAAU9B,WAAa8B,EAAU9B,WAAc+B,IAAc,IAAMD,EAAU7B,OAAS,cAGlF+B,EAAc,KAAOJ,EAAS/B,UAAY+B,EAAS7B,cAEvD8B,EAAS9B,aAAe8B,EAAS9B,aAAgBiC,IAAe,IAAMH,EAAS5B,OAAU,KACzF6B,EAAUjC,UAAciC,EAAUjC,UAAemC,IAAe,IAAMF,EAAU7B,OAAS,UAMjGQ,QAAQC,IAAI,gBACZD,QAAQC,IAAIkE,GAER,IAAA+B,EAAS,KACb/B,EAAIvP,SAAQuM,IAEwB,MAAvBA,EAASjC,WAClBgH,EAAS3O,SAAS4O,kBAAkBhF,EAASnC,IAC7CkH,EAAO,GAAGjN,MAAMmN,MAAK,GAAMjF,EAAS/B,cAAc+B,EAAS9B,gBAAgB8B,EAAS7B,iBAAiB6B,EAAS5B,eAC9E,MAAvB4B,EAASjC,YAClBgH,EAAS3O,SAAS4O,kBAAkBhF,EAASnC,IAC7CkH,EAAO,GAAGjN,MAAMmN,MAAW,GAAAjF,EAASxB,MAAMP,cAAc+B,EAASxB,MAAMN,gBAAgB8B,EAASxB,MAAML,iBAAiB6B,EAASxB,MAAMJ,kBAMxIgF,EADkD,SAAhDE,EAAE7N,OAAO+O,cAAcnN,aAAa,QAC5B2M,SAASV,EAAE7N,OAAOoI,IAElBmG,SAASV,EAAE7N,OAAO+O,cAAcnN,aAAa,UAI7BiM,IACxB,GAAc,OAAdL,SACK,EAGTpE,QAAQC,IAAI,wCACZwE,EAAEM,iBACFN,EAAE+B,aAAaC,WAAa,OAExB,IAAAC,EAAanP,SAASgO,eAAe,UACrCpE,EAAa,KAGfA,EADkD,SAAhDsD,EAAE7N,OAAO+O,cAAcnN,aAAa,QAC3B2L,EAAIgB,SAASV,EAAE7N,OAAOoI,KAEtBmF,EAAIgB,SAASV,EAAE7N,OAAO+O,cAAcnN,aAAa,UAE9DwH,QAAQC,IAAIkB,GAER,IAAAmE,EAAa/N,SAASgO,eAAe,YAAYC,YACjDC,EAAalO,SAASgO,eAAe,sBAAsBG,aAC3DpE,EAAa/J,SAASgO,eAAe,mBAAmBC,YACxDjE,EAAahK,SAASgO,eAAe,mBAAmBG,aAExDiB,EAAe/E,EAAYN,EAAYH,EAAS5B,YAChDqH,EAAehF,EAAYL,EAAYJ,EAAS/B,WAWhDyH,EAAoC,IAVrBrF,EAAgBF,EAAYH,EAAS5B,WAAY4B,EAAS9B,aAWzEyH,EAAoC,IAVrBtF,EAAgBD,EAAYJ,EAAS/B,UAAY+B,EAAS7B,cAgBzEyH,EDvTD,SAAsBC,EAAWC,GACtC,OAAQD,GACN,KAAK,EACH,OAAQC,GACN,KAAK,EACH,MAAO,KACT,KAAK,EACH,MAAO,IACT,KAAK,EACH,MAAO,KACT,QACE,MAAO,IAEb,KAAK,EACH,OAAQA,GACN,KAAK,EACH,MAAO,IACT,KAAK,EAIL,QACE,MAAO,IAHT,KAAK,EACH,MAAO,IAIb,KAAK,EACH,OAAQA,GACN,KAAK,EACH,MAAO,KACT,KAAK,EACH,MAAO,IACT,KAAK,EACH,MAAO,KACT,QACE,MAAO,IAEb,QACE,MAAO,IAEb,CCiRuBC,CAJJnF,EAAgB0C,EAAEmB,QAAUN,EAAYqB,EAASE,GACjD9E,EAAgB0C,EAAEoB,QAAUJ,EAAYmB,EAASE,WAOpC,OAAjBC,EACU,MAAf1C,IAAqBA,EAAa,KACZ,OAAjB0C,EACU,MAAf1C,IAAqBA,EAAa,KACZ,OAAjB0C,EACU,MAAf1C,IAAqBA,EAAa,KACZ,OAAjB0C,EACU,MAAf1C,IAAqBA,EAAa,KACbA,EAAa0C,EAEczC,EAAhC,MAAjByC,GAA2C,MAAjBA,EAKvB1C,OACD,IACHqC,EAAWzN,MAAMmN,MAAW,GAAAjF,EAAS/B,cAAc+B,EAAS9B,gBAAgB8B,EAAS7B,cAAiB,KAAO6B,EAAS/B,UAAY+B,EAAS7B,eAAiB,MAAO6B,EAAS5B,wBAEzK,IACHmH,EAAWzN,MAAMmN,MAAW,GAAAjF,EAAS/B,cAAc+B,EAAS9B,gBAAgB8B,EAAS7B,iBAAiB6B,EAAS5B,YAAe,KAAO4B,EAAS5B,WAAa4B,EAAS9B,cAAgB,eAEjL,IACHqH,EAAWzN,MAAMmN,MAAW,GAAAjF,EAAS/B,WAAc,KAAO+B,EAAS/B,UAAY+B,EAAS7B,eAAiB,MAAO6B,EAAS9B,gBAAgB8B,EAAS7B,iBAAiB6B,EAAS5B,wBAGzK,IACHmH,EAAWzN,MAAMmN,MAAW,GAAAjF,EAAS/B,cAAc+B,EAAS9B,aAAgB,KAAO8B,EAAS5B,WAAa4B,EAAS9B,cAAgB,MAAO8B,EAAS7B,iBAAiB6B,EAAS5B,cAGhLmH,EAAWzN,MAAMoN,QAAU,QAC3BK,EAAWzN,MAAMqN,OAAU,GAAG,EAOH7B,IACvB,GAAc,OAAdL,SACK,EAIL,IAAAsC,EAAanP,SAASgO,eAAe,aAEzCvF,QAAQC,IAAI,WACZyG,EAAWzN,MAAMoN,QAAU,OAC3BK,EAAWzN,MAAMqN,QAAW,EAE5BtG,QAAQC,IAAI,mCACZD,QAAQC,IAAI,aAAesE,GAMvBH,EAAUpF,KAAOuF,EAAO,CAEpB,MAAA4C,EAAgBnD,EAAIzD,OAAO4D,EAAII,GAAUJ,EAAIlO,OAAQmO,EAAWC,EAAYC,GAE9E6C,QACFlD,GAAY,GAGZE,EAAInK,KAAKmN,EAAc,IACvBhD,EAAInK,KAAKmN,EAAc,KAKrBhD,EAAIA,EAAIA,EAAIC,EAAUpF,IAAIS,MAAMA,MAClCuE,EAAIrD,OAAOwD,EAAIA,EAAIA,EAAIC,EAAUpF,IAAIS,MAAMA,MAAO0E,EAAIA,EAAIC,EAAUpF,IAAIS,MAAO0E,EAAIC,EAAUpF,KAE7FgF,EAAIrD,OAAO,KAAMwD,EAAIA,EAAIC,EAAUpF,IAAIS,MAAO0E,EAAIC,EAAUpF,KAI9DgF,EAAI/C,WAAWkD,GAEfnE,QAAQC,IAAI,6CACZD,QAAQC,IAAImE,GACZpE,QAAQC,IAAIoE,GACZrE,QAAQC,IAAIqE,GACZtE,QAAQC,IAAIkE,GAIfO,EAAA,EAAAP,MAAUA,IAGTC,EAAa,KACbC,EAAa,IACbC,GAAa,EACbC,GAAc,CAAC,YAoESC,EAAQ4C,EAAK1H,KAAI,MAYjB8E,EAAQ4C,EAAKzH,MAAK,MAiBnB6E,EAAQ4C,EAAI,6RCvhBvCrQ,EAIKH,EAAAyQ,EAAArQ,GAHDL,EAEO0Q,EAAAC,saCiBe,6FACA,k4BAPblS,EAAW,sCAAXA,EAAW,+LAHaA,EAAa,YAAMA,EAAO,mFAC5BA,EAAO,sEAF1C2B,EAeKH,EAAAyQ,EAAArQ,GAdDL,EAA+D0Q,EAAAxO,UAC/DlC,EAIQ0Q,EAAAE,yBACR5Q,EAOK0Q,EAAAG,mDAb4BpS,EAAa,4SAV1C,IAAAqS,GAAU,oDAIPC,YAAAA,EAAc,wBAAsBhJ,GACpCiJ,cAAAA,GAAgB,GAAKjJ,EAC5BkJ,EAAU,SAAWH,yYCEFrS,EAAS,kCAA4BA,EAAmB,uBAAiBA,EAAS,+BAAyBA,EAAgB,YAFlJ2B,EAKKH,EAAA4Q,EAAAxQ,iIAHkB5B,EAAS,6CAA4BA,EAAmB,kCAAiBA,EAAS,0CAAyBA,EAAgB,yHARtIyS,UAAAA,EAAY,WAASnJ,GACrBoJ,oBAAAA,EAAsB,WAASpJ,GAC/BqJ,UAAAA,EAAY,WAASrJ,GACrBsJ,iBAAAA,EAAmB,WAAStJ,0ZCmBxB,+EACA,+EACA,owBAGA,+EACA,uxCAbhB3H,EAAwCH,EAAAqR,EAAAjR,YACxCD,EAAuCH,EAAAiC,EAAA7B,OAAR5B,EAAI,8CADjBA,EAAM,sDACOA,EAAI,QAAJA,EAAI,uMAT7B,IAAAkC,EAAO,4BAEToN,EAAA,EAAApN,EAAO,oBAOoBA,EAAI6G,KAAA7F,8JCoMjBlD,EAAY,oGAxBX,2gBAAnB2B,EAGMH,EAAAwL,EAAApL,+BAEND,EAAoFH,EAAA4L,EAAAxL,YAEpFD,EAyBMH,EAAAsR,EAAAlR,GAxBJL,EAUMuR,EAAArF,UAENlM,EAMMuR,EAAAC,GALJxR,EAIMwR,EAAAC,GAHJzR,EAAkGyR,EAAA3F,6BAMtG9L,EAGMuR,EAAAG,+BA1B0CC,mBAiBsBlT,EAAwB,iCRm7ChG,SAA2BmT,EAAQC,GAC/B,MAAMlO,EAAS,CAAA,EACTmO,EAAc,CAAA,EACdC,EAAgB,CAAErT,QAAS,GACjC,IAAIa,EAAIqS,EAAOtS,OACf,KAAOC,KAAK,CACR,MAAMoF,EAAIiN,EAAOrS,GACXyS,EAAIH,EAAQtS,GAClB,GAAIyS,EAAG,CACH,IAAK,MAAM5P,KAAOuC,EACRvC,KAAO4P,IACTF,EAAY1P,GAAO,GAE3B,IAAK,MAAMA,KAAO4P,EACTD,EAAc3P,KACfuB,EAAOvB,GAAO4P,EAAE5P,GAChB2P,EAAc3P,GAAO,GAG7BwP,EAAOrS,GAAKyS,CACf,MAEG,IAAK,MAAM5P,KAAOuC,EACdoN,EAAc3P,GAAO,CAGhC,CACD,IAAK,MAAMA,KAAO0P,EACR1P,KAAOuB,IACTA,EAAOvB,QAAOnD,GAEtB,OAAO0E,CACX,MAC2BsO,EQl9CTxT,EAAY,GRm9CK,iBAAjBwT,GAA8C,OAAjBA,EAAwBA,EAAe,SADtF,IAA2BA,uLQplDhB,SAAAN,GAA2B7D,GAGlCzE,QAAQC,IAAI,4CAIR4I,EAAWpE,EAAE7N,OAQR,SAAAkS,EAAgC/Q,GACvCiI,QAAQC,IAAI,0CAQL,SAAA8I,EAA2BhR,MAClCiI,QAAQC,IAAI,uCACZlI,EAAMgN,iBAGFhN,EAAMiN,EAAI,GAAKjN,EAAMkN,EAAI,EAAC,CACxB,IAAA+D,EAAY,EACZC,EAAQ1R,SAASgO,eAAe,YAChC2D,EAAQ3R,SAASgO,eAAe,cAChC4D,EAAQ5R,SAASgO,eAAe,mBAChC6D,EAAQ7R,SAASgO,eAAe,YAMlCyD,EADkB,aAAhBH,EAAS7J,GACGjH,EAAM6N,QAAgByD,OAAOC,WAAe,KAE5CvR,EAAM8N,QAAU,IAAMwD,OAAOE,YAAe,IAExDP,EAAY,GACdA,EAAY,GACHA,EAAY,KACrBA,EAAY,IAIM,aAAhBH,EAAS7J,IACXiK,EAAMhQ,MAAMuQ,MAAgBR,EAAa,IACzCE,EAAMjQ,MAAMuQ,MAAU,IAAMR,EAAa,IAEzChJ,QAAQC,IAAKgJ,EAAMhQ,MAAMuQ,OACzBxJ,QAAQC,IAAKiJ,EAAMjQ,MAAMuQ,SAEzBL,EAAMlQ,MAAMwQ,OAAgBT,EAAa,IACzCI,EAAMnQ,MAAMwQ,OAAU,IAAMT,EAAa,IAEzChJ,QAAQC,IAAKkJ,EAAMlQ,MAAMwQ,QACzBzJ,QAAQC,IAAKmJ,EAAMnQ,MAAMwQ,UAtD/BZ,EAAS3Q,iBAAiB,YAAa4Q,GACvCD,EAAS3Q,iBAAiB,OAAa6Q,GACvCF,EAAS3Q,iBAAiB,oBAoEjBwR,IACP1J,QAAQC,IAAI,sCAEZ4I,EAAS1Q,oBAAoB,YAAa2Q,GAC1CD,EAAS1Q,oBAAoB,OAAa4Q,GAC1CF,EAAS1Q,oBAAoB,UAAauR,qBAxJzC,MACCC,EAAY,CACV3F,QAFOpE,EAGbqE,IAAM,EACNC,cAAe,EACfC,IAAG,IASLnE,QAAQC,IAAI,0BACZD,QAAQC,IAAI0J,EAAaxF,cAwJSM,IAClCA,EAAE+B,aAAaC,WAAa,OAC5BhC,EAAEM,gBAAc,UCrLN,kEAAQ,CACnBnO,OAAQW,SAASqS"}